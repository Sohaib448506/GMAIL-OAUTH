{"ast":null,"code":"var _jsxFileName = \"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport { APIUserData, userData, displayEmails } from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\"; //import { selectUser } from \"../../features/userSlice\";\n\nimport InboxIDs from \"../../components/api/InboxList\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\nimport parseMessage from \"gmail-api-parse-message\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction EmailList() {\n  _s();\n\n  var _data$emailData, _data$data;\n\n  //  const user = useSelector(selectUser);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const data = useSelector(APIUserData);\n  const emailGathered = (_data$emailData = data.emailData) === null || _data$emailData === void 0 ? void 0 : _data$emailData.emailGathered;\n  const totalMessagesOfInbox = data.profiletotalInboxMessages;\n  const dispatch = useDispatch();\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n  const [resultLoaded, setResultLoaded] = useState(2);\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] = useState([]);\n  var nextPageToken = (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.nextPageToken;\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map(item => {\n          var parsedMessage = parseMessage(item); //To get the attachments, HTML and Plain TExt of the body\n\n          if (parsedMessage.attachments) {\n            const attachments = parsedMessage.attachments;\n            var attachmentId;\n\n            if (attachments.length > 1) {\n              let array = [];\n              const gathered = attachments.map(x => {\n                array = [...array, x.attachmentId];\n                return array;\n              });\n              attachmentId = gathered;\n            } else attachmentId = parsedMessage.attachments[0].attachmentId;\n          } else {\n            attachmentId = \"\";\n          }\n\n          const textHTML = parsedMessage.textHtml;\n          const id = item.id;\n          const message = item.snippet;\n          const to2 = item.payload.headers.find(header => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find(header => {\n            if (header.name === \"Subject\") {\n              if (header.value.length > 0) return header.value;else return \"Subject is not defined\";\n            }\n          });\n          const date2 = item.payload.headers.find(header => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value\n            },\n            label,\n            attachmentId,\n            textHTML\n          };\n\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying(pre => [...pre, arr]);\n          }\n\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(x => x.id === arr.id);\n\n            if (condition) {\n              setEmailGatheredDestructurying(pre => [...pre]);\n            } else {\n              setEmailGatheredDestructurying(pre => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    const difference = totalMessagesOfInbox - 2 - resultLoaded;\n\n    if (difference < 1) {\n      setNextPageIcon(true);\n    } else {\n      setNextPageIcon(false);\n      setPrevPageIcon(false);\n    }\n\n    if (resultLoaded <= totalMessagesOfInbox) {\n      if (totalMessagesOfInbox - resultLoaded - 2 > 0) {\n        setPreArray(pre => [...pre, nextPageToken]);\n      }\n\n      setResultLoaded(x => x + 2);\n      InboxIDs(user).get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}`).then(res => {\n        {\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n\n  const prevPage = () => {\n    setNextPageIcon(false);\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const prevPageToken = preArray.pop(); //Just for next use\n\n      setResultLoaded(x => x - 2);\n      prePageApIData(prevPageToken);\n    } else {\n      setPrevPageIcon(true);\n      preArray.pop();\n      setResultLoaded(x => x - 2);\n      InboxIDs(user).get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`).then(res => {\n        {\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n      }).catch(error => {\n        console.error(error);\n      });\n    }\n  };\n\n  const prePageApIData = token => {\n    InboxIDs(user).get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}`).then(res => {\n      {\n        setEmailGatheredDestructurying([]);\n        dispatch(userData(res.data));\n        setNewEmailListIDs(res.data.messages);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  useEffect(() => {\n    setNewEmailGathered([]);\n\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map(Emailid => InboxIDs(user).get(`/${user.user_id}/messages/${Emailid.id}`).then(res => {\n        const setting = res.data;\n        setNewEmailGathered(newEmailGathered => [...newEmailGathered, setting]);\n      }).catch(error => {\n        console.error(error);\n      }));\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({\n        emailGathered\n      }));\n    }\n  }, [newEmailGathered]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: !data.displaySingleMessage && !data.sentEmailFetchedDisplay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"emailList\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emailList-settings\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emailList-settingsLeft\",\n          children: [/*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(ArrowDropDownIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 238,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(RedoIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(MoreVertIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"emailList-settingsRight\",\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => {\n              prevPage();\n            },\n            disabled: prevPageIcon,\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => {\n              nextPage();\n            },\n            disabled: nextPageIcon,\n            children: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(KeyboardHideIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            children: /*#__PURE__*/_jsxDEV(SettingsIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), data.displayList && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emailList-sections\",\n        children: [/*#__PURE__*/_jsxDEV(Section, {\n          Icon: InboxIcon,\n          title: \"Primary\",\n          color: \"red\",\n          selected: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Section, {\n          Icon: PeopleIcon,\n          title: \"Social\",\n          color: \"#1A73E8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Section, {\n          Icon: LocalOfferIcon,\n          title: \"Promotions\",\n          color: \"green\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"emailList-list\",\n        children: emailGatheredDestructurying.map(_ref => {\n          let {\n            id,\n            data: {\n              to,\n              subject,\n              description,\n              timestamp\n            },\n            label,\n            attachmentId,\n            textHTML\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(EmailRow, {\n            id: id,\n            title: to,\n            subject: subject,\n            description: description,\n            time: timestamp,\n            label: label,\n            attachmentId: attachmentId,\n            textHTML: textHTML\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_s(EmailList, \"MHuAFS32IWhB86EFpbJCaK6Ts8o=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = EmailList;\nexport default EmailList;\n\nvar _c;\n\n$RefreshReg$(_c, \"EmailList\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","Checkbox","IconButton","ArrowDropDownIcon","MoreVertIcon","RedoIcon","ChevronLeftIcon","ChevronRightIcon","KeyboardHideIcon","SettingsIcon","InboxIcon","PeopleIcon","LocalOfferIcon","APIUserData","userData","displayEmails","useSelector","useDispatch","InboxIDs","Section","EmailRow","parseMessage","EmailList","user","JSON","parse","localStorage","getItem","data","emailGathered","emailData","totalMessagesOfInbox","profiletotalInboxMessages","dispatch","nextPageIcon","setNextPageIcon","prevPageIcon","setPrevPageIcon","resultLoaded","setResultLoaded","newEmailListIDs","setNewEmailListIDs","newEmailGathered","setNewEmailGathered","preArray","setPreArray","emailGatheredDestructurying","setEmailGatheredDestructurying","nextPageToken","map","item","parsedMessage","attachments","attachmentId","length","array","gathered","x","textHTML","textHtml","id","message","snippet","to2","payload","headers","find","header","name","value","subject2","date2","unread2","labelIds","indexOf","label","arr","to","subject","description","timestamp","pre","condition","nextPage","difference","get","user_id","then","res","messages","catch","error","console","prevPage","preArraylength","prevPageToken","pop","prePageApIData","token","Emailid","setting","displaySingleMessage","sentEmailFetchedDisplay","displayList"],"sources":["/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js"],"sourcesContent":["import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\n\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\n\nimport { APIUserData, userData, displayEmails } from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\n//import { selectUser } from \"../../features/userSlice\";\n\nimport InboxIDs from \"../../components/api/InboxList\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\n\nimport parseMessage from \"gmail-api-parse-message\";\n\nfunction EmailList() {\n  //  const user = useSelector(selectUser);\n  const user = JSON.parse(localStorage.getItem(\"user\"));\n  const data = useSelector(APIUserData);\n\n  const emailGathered = data.emailData?.emailGathered;\n  const totalMessagesOfInbox = data.profiletotalInboxMessages;\n\n  const dispatch = useDispatch();\n\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n  const [resultLoaded, setResultLoaded] = useState(2);\n\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] =\n    useState([]);\n\n  var nextPageToken = data.data?.nextPageToken;\n\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map((item) => {\n          var parsedMessage = parseMessage(item); //To get the attachments, HTML and Plain TExt of the body\n\n          if (parsedMessage.attachments) {\n            const attachments = parsedMessage.attachments;\n            var attachmentId;\n            if (attachments.length > 1) {\n              let array = [];\n              const gathered = attachments.map((x) => {\n                array = [...array, x.attachmentId];\n                return array;\n              });\n              attachmentId = gathered;\n            } else attachmentId = parsedMessage.attachments[0].attachmentId;\n          } else {\n            attachmentId = \"\";\n          }\n\n          const textHTML = parsedMessage.textHtml;\n\n          const id = item.id;\n          const message = item.snippet;\n\n          const to2 = item.payload.headers.find((header) => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find((header) => {\n            if (header.name === \"Subject\") {\n              if (header.value.length > 0) return header.value;\n              else return \"Subject is not defined\";\n            }\n          });\n\n          const date2 = item.payload.headers.find((header) => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value,\n            },\n            label,\n            attachmentId,\n            textHTML,\n          };\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying((pre) => [...pre, arr]);\n          }\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(\n              (x) => x.id === arr.id\n            );\n            if (condition) {\n              setEmailGatheredDestructurying((pre) => [...pre]);\n            } else {\n              setEmailGatheredDestructurying((pre) => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    const difference = totalMessagesOfInbox - 2 - resultLoaded;\n\n    if (difference < 1) {\n      setNextPageIcon(true);\n    } else {\n      setNextPageIcon(false);\n      setPrevPageIcon(false);\n    }\n    if (resultLoaded <= totalMessagesOfInbox) {\n      if (totalMessagesOfInbox - resultLoaded - 2 > 0) {\n        setPreArray((pre) => [...pre, nextPageToken]);\n      }\n      setResultLoaded((x) => x + 2);\n\n      InboxIDs(user)\n        .get(\n          `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}`\n        )\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const prevPage = () => {\n    setNextPageIcon(false);\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const prevPageToken = preArray.pop(); //Just for next use\n      setResultLoaded((x) => x - 2);\n\n      prePageApIData(prevPageToken);\n    } else {\n      setPrevPageIcon(true);\n      preArray.pop();\n      setResultLoaded((x) => x - 2);\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`)\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n  const prePageApIData = (token) => {\n    InboxIDs(user)\n      .get(\n        `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}`\n      )\n      .then((res) => {\n        {\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    setNewEmailGathered([]);\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n\n            setNewEmailGathered((newEmailGathered) => [\n              ...newEmailGathered,\n              setting,\n            ]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({ emailGathered }));\n    }\n  }, [newEmailGathered]);\n\n  return (\n    <>\n      {!data.displaySingleMessage && !data.sentEmailFetchedDisplay && (\n        <div className=\"emailList\">\n          <div className=\"emailList-settings\">\n            <div className=\"emailList-settingsLeft\">\n              <Checkbox />\n              <IconButton>\n                <ArrowDropDownIcon />\n              </IconButton>\n              <IconButton>\n                <RedoIcon />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n            <div className=\"emailList-settingsRight\">\n              <IconButton\n                onClick={() => {\n                  prevPage();\n                }}\n                disabled={prevPageIcon}\n              >\n                <ChevronLeftIcon />\n              </IconButton>\n              <IconButton\n                onClick={() => {\n                  nextPage();\n                }}\n                disabled={nextPageIcon}\n              >\n                <ChevronRightIcon />\n              </IconButton>\n              <IconButton>\n                <KeyboardHideIcon />\n              </IconButton>\n              <IconButton>\n                <SettingsIcon />\n              </IconButton>\n            </div>\n          </div>\n\n          {data.displayList && (\n            <div className=\"emailList-sections\">\n              <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n              <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n              <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n            </div>\n          )}\n\n          <div className=\"emailList-list\">\n            {emailGatheredDestructurying.map(\n              ({\n                id,\n                data: { to, subject, description, timestamp },\n                label,\n                attachmentId,\n                textHTML,\n              }) => (\n                <EmailRow\n                  id={id}\n                  key={id}\n                  title={to}\n                  subject={subject}\n                  description={description}\n                  time={timestamp}\n                  label={label}\n                  attachmentId={attachmentId}\n                  textHTML={textHTML}\n                />\n              )\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default EmailList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}