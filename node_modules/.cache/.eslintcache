[{"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/index.js":"1","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js":"2","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/serviceWorker.js":"3","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/app/store.js":"4","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/mailSlice.js":"5","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/userSlice.js":"6","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Mail/Mail.js":"7","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/Sidebar.js":"8","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailList/EmailList.js":"9","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendMail/SendMail.js":"10","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Login/Login.js":"11","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Header/Header.js":"12","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/SidebarOption.js":"13","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Section/Section.js":"14","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailRow/EmailRow.js":"15","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/api/InboxList.js":"16","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/dataSlice.js":"17","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendReply/SendReply.js":"18","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/ForwardMessage/ForwardsMessage.js":"19"},{"size":627,"mtime":1658324289674,"results":"20","hashOfConfig":"21"},{"size":2670,"mtime":1658571816893,"results":"22","hashOfConfig":"21"},{"size":5014,"mtime":1658324289674,"results":"23","hashOfConfig":"21"},{"size":328,"mtime":1658572575218,"results":"24","hashOfConfig":"21"},{"size":720,"mtime":1658324289674,"results":"25","hashOfConfig":"21"},{"size":440,"mtime":1658406608734,"results":"26","hashOfConfig":"21"},{"size":4371,"mtime":1658573779103,"results":"27","hashOfConfig":"21"},{"size":3751,"mtime":1658576780707,"results":"28","hashOfConfig":"21"},{"size":8934,"mtime":1658561892349,"results":"29","hashOfConfig":"21"},{"size":2771,"mtime":1658571316644,"results":"30","hashOfConfig":"21"},{"size":3074,"mtime":1658407131181,"results":"31","hashOfConfig":"21"},{"size":1783,"mtime":1658599569784,"results":"32","hashOfConfig":"21"},{"size":315,"mtime":1658324289674,"results":"33","hashOfConfig":"21"},{"size":382,"mtime":1658324289674,"results":"34","hashOfConfig":"21"},{"size":1528,"mtime":1658552995549,"results":"35","hashOfConfig":"21"},{"size":279,"mtime":1658382941125,"results":"36","hashOfConfig":"21"},{"size":1481,"mtime":1658576480821,"results":"37","hashOfConfig":"21"},{"size":3034,"mtime":1658573071014,"results":"38","hashOfConfig":"21"},{"size":3196,"mtime":1658601337950,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"szesoh",{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"42"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"42"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/index.js",[],["84","85"],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js",["86","87","88","89"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Mail from \"./components/Mail/Mail\";\nimport EmailList from \"./components/EmailList/EmailList\";\nimport SendMail from \"./components/SendMail/SendMail\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSendMessageIsOpen } from \"./features/mailSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./components/Login/Login\";\nimport InboxIDs from \"./components/api/InboxList\";\nimport { userData, displayEmails, clickRecord } from \"./features/dataSlice\";\n\nfunction App() {\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\n  const user = useSelector(selectUser);\n  const Emails = useSelector(displayEmails);\n\n  const emailsToDisplay = Emails.payload.data.emailData?.emailGathered;\n\n  const dispatch = useDispatch();\n\n  const [emailListIDs, setEmailListIDs] = useState([]);\n\n  const [emailGathered, setEmailGathered] = useState([]);\n\n  useEffect(() => {\n    if (user) {\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2`)\n        .then((res) => {\n          dispatch(userData(res.data));\n          setEmailListIDs(res.data.messages);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (emailListIDs.length > 0) {\n      emailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n            setEmailGathered((emailGathered) => [...emailGathered, setting]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\");\n    }\n  }, [emailListIDs]);\n  useEffect(() => {\n    dispatch(displayEmails({ emailGathered }));\n  }, [emailGathered]);\n  return (\n    <Router>\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app\">\n          <Header />\n          <div className=\"app-body\">\n            <Sidebar emails={emailsToDisplay} />\n            <Switch>\n              <Route path=\"/mail\">\n                <Mail />\n              </Route>\n              <Route path=\"/\" exact>\n                <EmailList emailGathered={emailsToDisplay} />\n              </Route>\n            </Switch>\n          </div>\n\n          {sendMessageIsOpen && <SendMail />}\n        </div>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/serviceWorker.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/app/store.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/mailSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/userSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Mail/Mail.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/Sidebar.js",["90"],"import { Button, IconButton } from \"@material-ui/core\";\nimport \"./Sidebar.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport DuoIcon from \"@material-ui/icons/Duo\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport SidebarOption from \"./SidebarOption\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { openSendMessage } from \"../../features/mailSlice\";\nimport {\n  profileData,\n  profileSentMessages,\n  profiletotalMessages,\n} from \"../../features/dataSlice\";\nimport { useEffect } from \"react\";\nimport InboxIDs from \"../api/InboxList\";\n\nfunction Sidebar({ emails }) {\n  const dispatch = useDispatch();\n  const profileDataUpdate = useSelector(profileData);\n  const user = useSelector(selectUser);\n  const profileDataTotalUnreadMessages =\n    profileDataUpdate.payload.data.profileData;\n  const profileDataTotalSentMessages = useSelector(profileSentMessages);\n  const TotalSentMessages =\n    profileDataTotalSentMessages.payload.data.profileSentMessages;\n  const userTotalMessages = useSelector(profiletotalMessages);\n\n  const totalMessages = userTotalMessages.payload.data.profiletotalMessages;\n  useEffect(() => {\n    //for getting total Messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/profile`)\n      .then((res) => {\n        dispatch(profiletotalMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // for getting theunread messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/INBOX`)\n      .then((res) => {\n        dispatch(profileData(res.data.messagesUnread));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    //for getting sent messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/SENT`)\n      .then((res) => {\n        dispatch(profileSentMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [user]);\n\n  return (\n    <div className=\"sidebar\">\n      <Button\n        className=\"sidebar-compose\"\n        onClick={() => dispatch(openSendMessage())}\n        startIcon={<AddIcon fontSize=\"large\" />}\n      >\n        Compose\n      </Button>\n      <p>Total Messages: {totalMessages} </p>\n      <Link to=\"/\" className=\"sidebar-link\">\n        <SidebarOption\n          Icon={InboxIcon}\n          title=\"Inbox\"\n          number={profileDataTotalUnreadMessages}\n          selected={true}\n        />\n      </Link>\n      <SidebarOption Icon={StarIcon} title=\"Starred\" />\n      <SidebarOption Icon={AccessTimeIcon} title=\"Snoozed\" />\n      <SidebarOption Icon={LabelImportantIcon} title=\"Important\" />\n      <SidebarOption\n        Icon={NearMeIcon}\n        title=\"Sent\"\n        number={TotalSentMessages}\n      />\n      <SidebarOption Icon={NoteIcon} title=\"Drafts\" number={5} />\n      <SidebarOption Icon={ExpandMoreIcon} title=\"More\" />\n      <div className=\"sidebar-footer\">\n        <div className=\"sidebar-footerIcons\">\n          <IconButton>\n            <PersonIcon />\n          </IconButton>\n          <IconButton>\n            <DuoIcon />\n          </IconButton>\n          <IconButton>\n            <PhoneIcon />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailList/EmailList.js",["91","92","93","94","95","96","97","98","99","100"],"import { Checkbox, IconButton } from \"@material-ui/core\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\nimport { selectUser } from \"../../features/userSlice\";\n\nimport {\n  APIUserData,\n  userData,\n  displayEmails,\n  clickRecord,\n} from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport InboxIDs from \"../../components/api/InboxList\";\n\nfunction EmailList({ emailGathered }) {\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] =\n    useState([]);\n  const clickRecordOfMail = useSelector(clickRecord);\n  // console.log(\n  //   \"🚀 ~ file: Mail.js ~ line 24 ~ Mail ~ clickRecordOfMail\",\n  //   clickRecordOfMail\n  // );\n\n  const user = useSelector(selectUser);\n  const data = useSelector(APIUserData);\n\n  const dispatch = useDispatch();\n  const [load, setLoad] = useState(false);\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n\n  var nextPageToken = data.data?.nextPageToken;\n\n  // const [nextPageTokenRecord, setNextPageTokenRecord] = useState(null);\n\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map((item) => {\n          const id = item.id;\n          const message = item.snippet;\n\n          const to2 = item.payload.headers.find((header) => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find((header) => {\n            if (header.name === \"Subject\") {\n              return header.value;\n            }\n          });\n          const date2 = item.payload.headers.find((header) => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value,\n            },\n            label,\n          };\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying((pre) => [...pre, arr]);\n          }\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(\n              (x) => x.id === arr.id\n            );\n            if (condition) {\n              setEmailGatheredDestructurying((pre) => [...pre]);\n            } else {\n              setEmailGatheredDestructurying((pre) => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    if (nextPageToken) {\n      InboxIDs(user)\n        .get(\n          `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}`\n        )\n        .then((res) => {\n          if (!res.data.nextPageToken) {\n            setNextPageIcon(true);\n          }\n          setPrevPageIcon(false);\n\n          if (res.data?.resultSizeEstimate > 0) {\n            setPreArray((pre) => [...pre, nextPageToken]);\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          } else setNextPageIcon(true);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const prevPage = () => {\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const thisPageToken = preArray.pop(); //Just for next use\n      nextPageToken = preArray.pop();\n      prePageApIData(nextPageToken);\n      setNextPageIcon(false);\n    }\n    if (preArraylength === 0) {\n      setPrevPageIcon(true);\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`)\n        .then((res) => {\n          // if (!res.data.nextPageToken) {\n          //   setNextPageIcon(true);\n          // }\n\n          if (res.data?.resultSizeEstimate > 0) {\n            // setPreArray((pre) => [...pre, nextPageToken]);\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n          //  else setNextPageIcon(true);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n  const prePageApIData = (token) => {\n    InboxIDs(user)\n      .get(\n        `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}`\n      )\n      .then((res) => {\n        if (res.data?.resultSizeEstimate > 0) {\n          // setPreArray((pre) => [...pre, nextPageToken]);\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n        //  else setNextPageIcon(true);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    setNewEmailGathered([]);\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n\n            setNewEmailGathered((newEmailGathered) => [\n              ...newEmailGathered,\n              setting,\n            ]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    if (load) {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({ emailGathered }));\n    }\n  }, [newEmailGathered]);\n\n  return (\n    <div className=\"emailList\">\n      <div className=\"emailList-settings\">\n        <div className=\"emailList-settingsLeft\">\n          <Checkbox />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton>\n            <RedoIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n        <div className=\"emailList-settingsRight\">\n          <IconButton\n            onClick={() => {\n              prevPage();\n            }}\n            disabled={prevPageIcon}\n          >\n            <ChevronLeftIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => {\n              setLoad(true);\n              nextPage();\n            }}\n            disabled={nextPageIcon}\n          >\n            <ChevronRightIcon />\n          </IconButton>\n          <IconButton>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton>\n            <SettingsIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"emailList-sections\">\n        <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n        <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n        <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n      </div>\n\n      <div className=\"emailList-list\">\n        {emailGatheredDestructurying.map(\n          ({ id, data: { to, subject, description, timestamp }, label }) => (\n            <EmailRow\n              id={id}\n              key={id}\n              title={to}\n              subject={subject}\n              description={description}\n              time={timestamp}\n              label={label}\n            />\n          )\n        )}\n\n        {/* {emails.map(({ id, data: { to, subject, message, timestamp } }) => (\n          <EmailRow\n            id={id}\n            key={id}\n            title={to}\n            subject={subject}\n            description={message}\n            time={new Date(timestamp?.seconds * 1000).toUTCString()}\n          />\n        ))} */}\n        {/* <EmailRow\n          title=\"Twitch\"\n          subject=\"Hey fellow streamer!!\"\n          description=\"This is a DOPE\"\n          time=\"10pm\"\n        /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendMail/SendMail.js",["101","102"],"import React from \"react\";\nimport \"./SendMail.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { selectUser } from \"../../features/userSlice\";\nimport InboxIDs from \"../../components/api/InboxList\";\nimport { useSelector } from \"react-redux\";\n\nfunction SendMail() {\n  const {\n    register,\n    handleSubmit,\n\n    formState: { errors },\n  } = useForm();\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  function sendMessage(headers_obj, message) {\n    var email = \"\";\n\n    for (var header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n    window.gapi.client.gmail.users.messages\n      .send({\n        userId: \"me\",\n        resource: {\n          raw: window.btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\"),\n        },\n      })\n      .then((res) => console.log(\"Message has been Sent Successfully\"))\n      .catch((err) => console.log(err));\n  }\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: formData.to,\n      Subject: formData.subject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n  };\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>New Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(closeSendMessage())}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          {...register(\"to\", { required: true })}\n        />\n        {errors.to && <p className=\"sendMail-error\">To is Required!</p>}\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          {...register(\"subject\", { required: true })}\n        />\n        {errors.subject && (\n          <p className=\"sendMail-error\">Subject is Required!</p>\n        )}\n        <input\n          name=\"message\"\n          placeholder=\"Message\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendMail;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Login/Login.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Header/Header.js",["103"],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/SidebarOption.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Section/Section.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailRow/EmailRow.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/api/InboxList.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/dataSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendReply/SendReply.js",["104","105","106"],"import React, { useEffect } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { replyButtonClicked } from \"../../features/dataSlice\";\nimport { useSelector } from \"react-redux\";\n\nfunction SendReply(props) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  function sendMessage(headers_obj, message) {\n    var email = \"\";\n\n    for (var header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n    window.gapi.client.gmail.users.messages\n      .send({\n        userId: \"me\",\n        resource: {\n          raw: window.btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\"),\n        },\n      })\n      .then((res) => console.log(\"Reply Message has been Sent Successfully\"))\n      .catch((err) => console.log(err));\n  }\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: formData.to,\n      Subject: formData.subject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n    dispatch(replyButtonClicked(false));\n  };\n\n  var reply_to = props?.props.title?.replace(/\\\"<>/g, '\"');\n  var reply_to_splitted = reply_to.split(\" \");\n\n  var email_fetched = reply_to_splitted[reply_to_splitted.length - 1].slice(\n    1,\n    -1\n  );\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>Reply Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(replyButtonClicked(false))}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          value={email_fetched}\n          {...register(\"to\", { required: true })}\n        />\n        {errors.to && <p className=\"sendMail-error\">To is Required!</p>}\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          value={props.props.subject}\n          {...register(\"subject\", { required: true })}\n        />\n        {errors.subject && (\n          <p className=\"sendMail-error\">Subject is Required!</p>\n        )}\n        <input\n          name=\"message\"\n          placeholder=\"Write the Reply Message Here!\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendReply;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/ForwardMessage/ForwardsMessage.js",["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":14,"column":35,"nodeType":"115","messageId":"116","endLine":14,"endColumn":46},{"ruleId":"117","severity":1,"message":"118","line":41,"column":6,"nodeType":"119","endLine":41,"endColumn":12,"suggestions":"120"},{"ruleId":"117","severity":1,"message":"121","line":59,"column":6,"nodeType":"119","endLine":59,"endColumn":20,"suggestions":"122"},{"ruleId":"117","severity":1,"message":"118","line":62,"column":6,"nodeType":"119","endLine":62,"endColumn":21,"suggestions":"123"},{"ruleId":"117","severity":1,"message":"118","line":68,"column":6,"nodeType":"119","endLine":68,"endColumn":12,"suggestions":"124"},{"ruleId":"113","severity":1,"message":"125","line":30,"column":9,"nodeType":"115","messageId":"116","endLine":30,"endColumn":26},{"ruleId":"126","severity":1,"message":"127","line":53,"column":5,"nodeType":"128","messageId":"129","endLine":104,"endColumn":6},{"ruleId":"130","severity":1,"message":"131","line":55,"column":34,"nodeType":"132","messageId":"133","endLine":55,"endColumn":36},{"ruleId":"130","severity":1,"message":"134","line":59,"column":58,"nodeType":"132","messageId":"135","endLine":59,"endColumn":60},{"ruleId":"130","severity":1,"message":"134","line":64,"column":63,"nodeType":"132","messageId":"135","endLine":64,"endColumn":65},{"ruleId":"130","severity":1,"message":"134","line":69,"column":60,"nodeType":"132","messageId":"135","endLine":69,"endColumn":62},{"ruleId":"117","severity":1,"message":"136","line":105,"column":6,"nodeType":"119","endLine":105,"endColumn":21,"suggestions":"137"},{"ruleId":"113","severity":1,"message":"138","line":136,"column":13,"nodeType":"115","messageId":"116","endLine":136,"endColumn":26},{"ruleId":"117","severity":1,"message":"121","line":202,"column":6,"nodeType":"119","endLine":202,"endColumn":23,"suggestions":"139"},{"ruleId":"117","severity":1,"message":"140","line":208,"column":6,"nodeType":"119","endLine":208,"endColumn":24,"suggestions":"141"},{"ruleId":"113","severity":1,"message":"142","line":9,"column":8,"nodeType":"115","messageId":"116","endLine":9,"endColumn":16},{"ruleId":"113","severity":1,"message":"143","line":19,"column":9,"nodeType":"115","messageId":"116","endLine":19,"endColumn":13},{"ruleId":"144","severity":1,"message":"145","line":50,"column":9,"nodeType":"146","endLine":53,"endColumn":10},{"ruleId":"113","severity":1,"message":"147","line":1,"column":17,"nodeType":"115","messageId":"116","endLine":1,"endColumn":26},{"ruleId":"113","severity":1,"message":"148","line":8,"column":10,"nodeType":"115","messageId":"116","endLine":8,"endColumn":21},{"ruleId":"149","severity":1,"message":"150","line":47,"column":47,"nodeType":"151","messageId":"152","endLine":47,"endColumn":48,"suggestions":"153"},{"ruleId":"149","severity":1,"message":"150","line":50,"column":47,"nodeType":"151","messageId":"152","endLine":50,"endColumn":48,"suggestions":"154"},{"ruleId":"113","severity":1,"message":"155","line":53,"column":7,"nodeType":"115","messageId":"116","endLine":53,"endColumn":20},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'clickRecord' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["158"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["159"],["160"],["161"],"'clickRecordOfMail' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useMemo has a missing dependency: 'emailGatheredDestructurying'. Either include it or remove the dependency array.",["162"],"'thisPageToken' is assigned a value but never used.",["163"],"React Hook useEffect has missing dependencies: 'dispatch' and 'load'. Either include them or remove the dependency array.",["164"],"'InboxIDs' is defined but never used.","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useSelector' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["165","166"],["167","168"],"'email_fetched' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"169","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"messageId":"182","fix":"183","desc":"184"},{"messageId":"185","fix":"186","desc":"187"},{"messageId":"182","fix":"188","desc":"184"},{"messageId":"185","fix":"189","desc":"187"},"Update the dependencies array to be: [dispatch, user]",{"range":"190","text":"191"},"Update the dependencies array to be: [emailListIDs, user]",{"range":"192","text":"193"},"Update the dependencies array to be: [dispatch, emailGathered]",{"range":"194","text":"195"},{"range":"196","text":"191"},"Update the dependencies array to be: [emailGathered, emailGatheredDestructurying]",{"range":"197","text":"198"},"Update the dependencies array to be: [newEmailListIDs, user]",{"range":"199","text":"200"},"Update the dependencies array to be: [dispatch, load, newEmailGathered]",{"range":"201","text":"202"},"removeEscape",{"range":"203","text":"204"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"205","text":"206"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"207","text":"204"},{"range":"208","text":"206"},[1475,1481],"[dispatch, user]",[1976,1990],"[emailListIDs, user]",[2066,2081],"[dispatch, emailGathered]",[2446,2452],[3602,3617],"[emailGathered, emailGatheredDestructurying]",[6443,6460],"[newEmailListIDs, user]",[6606,6624],"[dispatch, load, newEmailGathered]",[1384,1385],"",[1384,1384],"\\",[1435,1436],[1435,1435]]