[{"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/index.js":"1","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js":"2","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/serviceWorker.js":"3","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/app/store.js":"4","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/mailSlice.js":"5","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/userSlice.js":"6","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Mail/Mail.js":"7","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/Sidebar.js":"8","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailList/EmailList.js":"9","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendMail/SendMail.js":"10","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Login/Login.js":"11","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Header/Header.js":"12","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/SidebarOption.js":"13","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Section/Section.js":"14","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailRow/EmailRow.js":"15","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/api/InboxList.js":"16","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/dataSlice.js":"17","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendReply/SendReply.js":"18","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/ForwardMessage/ForwardsMessage.js":"19","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/index.js":"20","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/App.js":"21","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/serviceWorker.js":"22","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/app/store.js":"23","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/mailSlice.js":"24","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/userSlice.js":"25","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/dataSlice.js":"26","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Header/Header.js":"27","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/Sidebar.js":"28","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Mail/Mail.js":"29","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendMail/SendMail.js":"30","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js":"31","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/api/InboxList.js":"32","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Login/Login.js":"33","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/SidebarOption.js":"34","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/ForwardMessage/ForwardsMessage.js":"35","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendReply/SendReply.js":"36","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Section/Section.js":"37","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailRow/EmailRow.js":"38","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SentEmails.js":"39","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SingleEmailDisplaySent.js":"40"},{"size":627,"mtime":1658324289674,"results":"41","hashOfConfig":"42"},{"size":2670,"mtime":1658571816893,"results":"43","hashOfConfig":"42"},{"size":5014,"mtime":1658324289674,"results":"44","hashOfConfig":"42"},{"size":328,"mtime":1658572575218,"results":"45","hashOfConfig":"42"},{"size":720,"mtime":1658324289674,"results":"46","hashOfConfig":"42"},{"size":440,"mtime":1658406608734,"results":"47","hashOfConfig":"42"},{"size":4371,"mtime":1658573779103,"results":"48","hashOfConfig":"42"},{"size":3751,"mtime":1658576780707,"results":"49","hashOfConfig":"42"},{"size":8934,"mtime":1658561892349,"results":"50","hashOfConfig":"42"},{"size":2771,"mtime":1658571316644,"results":"51","hashOfConfig":"42"},{"size":3074,"mtime":1658407131181,"results":"52","hashOfConfig":"42"},{"size":1783,"mtime":1658599569784,"results":"53","hashOfConfig":"42"},{"size":315,"mtime":1658324289674,"results":"54","hashOfConfig":"42"},{"size":382,"mtime":1658324289674,"results":"55","hashOfConfig":"42"},{"size":1528,"mtime":1658552995549,"results":"56","hashOfConfig":"42"},{"size":279,"mtime":1658382941125,"results":"57","hashOfConfig":"42"},{"size":1481,"mtime":1658576480821,"results":"58","hashOfConfig":"42"},{"size":3034,"mtime":1658573071014,"results":"59","hashOfConfig":"42"},{"size":3196,"mtime":1658601337950,"results":"60","hashOfConfig":"42"},{"size":627,"mtime":1658849832297,"results":"61","hashOfConfig":"62"},{"size":2673,"mtime":1658829081121,"results":"63","hashOfConfig":"62"},{"size":5014,"mtime":1658324289674,"results":"64","hashOfConfig":"62"},{"size":328,"mtime":1658572575218,"results":"65","hashOfConfig":"62"},{"size":720,"mtime":1658324289674,"results":"66","hashOfConfig":"62"},{"size":440,"mtime":1658406608734,"results":"67","hashOfConfig":"62"},{"size":2279,"mtime":1658845974241,"results":"68","hashOfConfig":"62"},{"size":1762,"mtime":1658729200488,"results":"69","hashOfConfig":"62"},{"size":4054,"mtime":1658848916788,"results":"70","hashOfConfig":"62"},{"size":4884,"mtime":1658840782222,"results":"71","hashOfConfig":"62"},{"size":4138,"mtime":1658812526964,"results":"72","hashOfConfig":"62"},{"size":9672,"mtime":1658841444682,"results":"73","hashOfConfig":"62"},{"size":279,"mtime":1658382941125,"results":"74","hashOfConfig":"62"},{"size":2773,"mtime":1658729003610,"results":"75","hashOfConfig":"62"},{"size":359,"mtime":1658848233279,"results":"76","hashOfConfig":"62"},{"size":4471,"mtime":1658813521962,"results":"77","hashOfConfig":"62"},{"size":4624,"mtime":1658813512634,"results":"78","hashOfConfig":"62"},{"size":382,"mtime":1658324289674,"results":"79","hashOfConfig":"62"},{"size":2206,"mtime":1658847047647,"results":"80","hashOfConfig":"62"},{"size":2726,"mtime":1658851577522,"results":"81","hashOfConfig":"62"},{"size":1008,"mtime":1658851618329,"results":"82","hashOfConfig":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},"szesoh",{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"85"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"85"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"85"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"85"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1crkjoz",{"filePath":"129","messages":"130","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"133"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"133"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"133"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"133"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"133"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"133"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"133"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/index.js",[],["176","177"],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/App.js",["178","179","180","181"],"import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Mail from \"./components/Mail/Mail\";\nimport EmailList from \"./components/EmailList/EmailList\";\nimport SendMail from \"./components/SendMail/SendMail\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSendMessageIsOpen } from \"./features/mailSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport Login from \"./components/Login/Login\";\nimport InboxIDs from \"./components/api/InboxList\";\nimport { userData, displayEmails, clickRecord } from \"./features/dataSlice\";\n\nfunction App() {\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\n  const user = useSelector(selectUser);\n  const Emails = useSelector(displayEmails);\n\n  const emailsToDisplay = Emails.payload.data.emailData?.emailGathered;\n\n  const dispatch = useDispatch();\n\n  const [emailListIDs, setEmailListIDs] = useState([]);\n\n  const [emailGathered, setEmailGathered] = useState([]);\n\n  useEffect(() => {\n    if (user) {\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2`)\n        .then((res) => {\n          dispatch(userData(res.data));\n          setEmailListIDs(res.data.messages);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (emailListIDs.length > 0) {\n      emailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n            setEmailGathered((emailGathered) => [...emailGathered, setting]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\");\n    }\n  }, [emailListIDs]);\n  useEffect(() => {\n    dispatch(displayEmails({ emailGathered }));\n  }, [emailGathered]);\n  return (\n    <Router>\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app\">\n          <Header />\n          <div className=\"app-body\">\n            <Sidebar emails={emailsToDisplay} />\n            <Switch>\n              <Route path=\"/mail\">\n                <Mail />\n              </Route>\n              <Route path=\"/\" exact>\n                <EmailList emailGathered={emailsToDisplay} />\n              </Route>\n            </Switch>\n          </div>\n\n          {sendMessageIsOpen && <SendMail />}\n        </div>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/serviceWorker.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/app/store.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/mailSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/userSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Mail/Mail.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/Sidebar.js",["182"],"import { Button, IconButton } from \"@material-ui/core\";\nimport \"./Sidebar.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport DuoIcon from \"@material-ui/icons/Duo\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport SidebarOption from \"./SidebarOption\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { openSendMessage } from \"../../features/mailSlice\";\nimport {\n  profileData,\n  profileSentMessages,\n  profiletotalMessages,\n} from \"../../features/dataSlice\";\nimport { useEffect } from \"react\";\nimport InboxIDs from \"../api/InboxList\";\n\nfunction Sidebar({ emails }) {\n  const dispatch = useDispatch();\n  const profileDataUpdate = useSelector(profileData);\n  const user = useSelector(selectUser);\n  const profileDataTotalUnreadMessages =\n    profileDataUpdate.payload.data.profileData;\n  const profileDataTotalSentMessages = useSelector(profileSentMessages);\n  const TotalSentMessages =\n    profileDataTotalSentMessages.payload.data.profileSentMessages;\n  const userTotalMessages = useSelector(profiletotalMessages);\n\n  const totalMessages = userTotalMessages.payload.data.profiletotalMessages;\n  useEffect(() => {\n    //for getting total Messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/profile`)\n      .then((res) => {\n        dispatch(profiletotalMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // for getting theunread messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/INBOX`)\n      .then((res) => {\n        dispatch(profileData(res.data.messagesUnread));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    //for getting sent messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/SENT`)\n      .then((res) => {\n        dispatch(profileSentMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [user]);\n\n  return (\n    <div className=\"sidebar\">\n      <Button\n        className=\"sidebar-compose\"\n        onClick={() => dispatch(openSendMessage())}\n        startIcon={<AddIcon fontSize=\"large\" />}\n      >\n        Compose\n      </Button>\n      <p>Total Messages: {totalMessages} </p>\n      <Link to=\"/\" className=\"sidebar-link\">\n        <SidebarOption\n          Icon={InboxIcon}\n          title=\"Inbox\"\n          number={profileDataTotalUnreadMessages}\n          selected={true}\n        />\n      </Link>\n      <SidebarOption Icon={StarIcon} title=\"Starred\" />\n      <SidebarOption Icon={AccessTimeIcon} title=\"Snoozed\" />\n      <SidebarOption Icon={LabelImportantIcon} title=\"Important\" />\n      <SidebarOption\n        Icon={NearMeIcon}\n        title=\"Sent\"\n        number={TotalSentMessages}\n      />\n      <SidebarOption Icon={NoteIcon} title=\"Drafts\" number={5} />\n      <SidebarOption Icon={ExpandMoreIcon} title=\"More\" />\n      <div className=\"sidebar-footer\">\n        <div className=\"sidebar-footerIcons\">\n          <IconButton>\n            <PersonIcon />\n          </IconButton>\n          <IconButton>\n            <DuoIcon />\n          </IconButton>\n          <IconButton>\n            <PhoneIcon />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailList/EmailList.js",["183","184","185","186","187","188","189","190","191","192"],"import { Checkbox, IconButton } from \"@material-ui/core\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\nimport { selectUser } from \"../../features/userSlice\";\n\nimport {\n  APIUserData,\n  userData,\n  displayEmails,\n  clickRecord,\n} from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport InboxIDs from \"../../components/api/InboxList\";\n\nfunction EmailList({ emailGathered }) {\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] =\n    useState([]);\n  const clickRecordOfMail = useSelector(clickRecord);\n  // console.log(\n  //   \"🚀 ~ file: Mail.js ~ line 24 ~ Mail ~ clickRecordOfMail\",\n  //   clickRecordOfMail\n  // );\n\n  const user = useSelector(selectUser);\n  const data = useSelector(APIUserData);\n\n  const dispatch = useDispatch();\n  const [load, setLoad] = useState(false);\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n\n  var nextPageToken = data.data?.nextPageToken;\n\n  // const [nextPageTokenRecord, setNextPageTokenRecord] = useState(null);\n\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map((item) => {\n          const id = item.id;\n          const message = item.snippet;\n\n          const to2 = item.payload.headers.find((header) => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find((header) => {\n            if (header.name === \"Subject\") {\n              return header.value;\n            }\n          });\n          const date2 = item.payload.headers.find((header) => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value,\n            },\n            label,\n          };\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying((pre) => [...pre, arr]);\n          }\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(\n              (x) => x.id === arr.id\n            );\n            if (condition) {\n              setEmailGatheredDestructurying((pre) => [...pre]);\n            } else {\n              setEmailGatheredDestructurying((pre) => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    if (nextPageToken) {\n      InboxIDs(user)\n        .get(\n          `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}`\n        )\n        .then((res) => {\n          if (!res.data.nextPageToken) {\n            setNextPageIcon(true);\n          }\n          setPrevPageIcon(false);\n\n          if (res.data?.resultSizeEstimate > 0) {\n            setPreArray((pre) => [...pre, nextPageToken]);\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          } else setNextPageIcon(true);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const prevPage = () => {\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const thisPageToken = preArray.pop(); //Just for next use\n      nextPageToken = preArray.pop();\n      prePageApIData(nextPageToken);\n      setNextPageIcon(false);\n    }\n    if (preArraylength === 0) {\n      setPrevPageIcon(true);\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`)\n        .then((res) => {\n          // if (!res.data.nextPageToken) {\n          //   setNextPageIcon(true);\n          // }\n\n          if (res.data?.resultSizeEstimate > 0) {\n            // setPreArray((pre) => [...pre, nextPageToken]);\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n          //  else setNextPageIcon(true);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n  const prePageApIData = (token) => {\n    InboxIDs(user)\n      .get(\n        `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}`\n      )\n      .then((res) => {\n        if (res.data?.resultSizeEstimate > 0) {\n          // setPreArray((pre) => [...pre, nextPageToken]);\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n        //  else setNextPageIcon(true);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    setNewEmailGathered([]);\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n\n            setNewEmailGathered((newEmailGathered) => [\n              ...newEmailGathered,\n              setting,\n            ]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    if (load) {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({ emailGathered }));\n    }\n  }, [newEmailGathered]);\n\n  return (\n    <div className=\"emailList\">\n      <div className=\"emailList-settings\">\n        <div className=\"emailList-settingsLeft\">\n          <Checkbox />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton>\n            <RedoIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n        <div className=\"emailList-settingsRight\">\n          <IconButton\n            onClick={() => {\n              prevPage();\n            }}\n            disabled={prevPageIcon}\n          >\n            <ChevronLeftIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => {\n              setLoad(true);\n              nextPage();\n            }}\n            disabled={nextPageIcon}\n          >\n            <ChevronRightIcon />\n          </IconButton>\n          <IconButton>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton>\n            <SettingsIcon />\n          </IconButton>\n        </div>\n      </div>\n      <div className=\"emailList-sections\">\n        <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n        <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n        <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n      </div>\n\n      <div className=\"emailList-list\">\n        {emailGatheredDestructurying.map(\n          ({ id, data: { to, subject, description, timestamp }, label }) => (\n            <EmailRow\n              id={id}\n              key={id}\n              title={to}\n              subject={subject}\n              description={description}\n              time={timestamp}\n              label={label}\n            />\n          )\n        )}\n\n        {/* {emails.map(({ id, data: { to, subject, message, timestamp } }) => (\n          <EmailRow\n            id={id}\n            key={id}\n            title={to}\n            subject={subject}\n            description={message}\n            time={new Date(timestamp?.seconds * 1000).toUTCString()}\n          />\n        ))} */}\n        {/* <EmailRow\n          title=\"Twitch\"\n          subject=\"Hey fellow streamer!!\"\n          description=\"This is a DOPE\"\n          time=\"10pm\"\n        /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendMail/SendMail.js",["193","194"],"import React from \"react\";\nimport \"./SendMail.css\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { selectUser } from \"../../features/userSlice\";\nimport InboxIDs from \"../../components/api/InboxList\";\nimport { useSelector } from \"react-redux\";\n\nfunction SendMail() {\n  const {\n    register,\n    handleSubmit,\n\n    formState: { errors },\n  } = useForm();\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  function sendMessage(headers_obj, message) {\n    var email = \"\";\n\n    for (var header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n    window.gapi.client.gmail.users.messages\n      .send({\n        userId: \"me\",\n        resource: {\n          raw: window.btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\"),\n        },\n      })\n      .then((res) => console.log(\"Message has been Sent Successfully\"))\n      .catch((err) => console.log(err));\n  }\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: formData.to,\n      Subject: formData.subject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n  };\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>New Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(closeSendMessage())}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          {...register(\"to\", { required: true })}\n        />\n        {errors.to && <p className=\"sendMail-error\">To is Required!</p>}\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          {...register(\"subject\", { required: true })}\n        />\n        {errors.subject && (\n          <p className=\"sendMail-error\">Subject is Required!</p>\n        )}\n        <input\n          name=\"message\"\n          placeholder=\"Message\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendMail;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Login/Login.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Header/Header.js",["195"],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Sidebar/SidebarOption.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/Section/Section.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/EmailRow/EmailRow.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/api/InboxList.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/features/dataSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/SendReply/SendReply.js",["196","197","198"],"import React, { useEffect } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { replyButtonClicked } from \"../../features/dataSlice\";\nimport { useSelector } from \"react-redux\";\n\nfunction SendReply(props) {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  function sendMessage(headers_obj, message) {\n    var email = \"\";\n\n    for (var header in headers_obj)\n      email += header += \": \" + headers_obj[header] + \"\\r\\n\";\n\n    email += \"\\r\\n\" + message;\n    window.gapi.client.gmail.users.messages\n      .send({\n        userId: \"me\",\n        resource: {\n          raw: window.btoa(email).replace(/\\+/g, \"-\").replace(/\\//g, \"_\"),\n        },\n      })\n      .then((res) => console.log(\"Reply Message has been Sent Successfully\"))\n      .catch((err) => console.log(err));\n  }\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: formData.to,\n      Subject: formData.subject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n    dispatch(replyButtonClicked(false));\n  };\n\n  var reply_to = props?.props.title?.replace(/\\\"<>/g, '\"');\n  var reply_to_splitted = reply_to.split(\" \");\n\n  var email_fetched = reply_to_splitted[reply_to_splitted.length - 1].slice(\n    1,\n    -1\n  );\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>Reply Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(replyButtonClicked(false))}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          value={email_fetched}\n          {...register(\"to\", { required: true })}\n        />\n        {errors.to && <p className=\"sendMail-error\">To is Required!</p>}\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          value={props.props.subject}\n          {...register(\"subject\", { required: true })}\n        />\n        {errors.subject && (\n          <p className=\"sendMail-error\">Subject is Required!</p>\n        )}\n        <input\n          name=\"message\"\n          placeholder=\"Write the Reply Message Here!\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendReply;\n","/home/sohaib/Desktop/MERN/Evaluation/Gmail-Clone/src/components/ForwardMessage/ForwardsMessage.js",["199","200"],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/index.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/App.js",["201","202","203"],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/serviceWorker.js",[],["204","205"],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/app/store.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/mailSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/userSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/dataSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Header/Header.js",["206"],"import React from \"react\";\nimport \"./Header.css\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser, logout } from \"../../features/userSlice\";\n\nfunction Header() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  const signOut = () => {\n    dispatch(logout());\n  };\n\n  return (\n    <div className=\"header\">\n      <div className=\"header-left\">\n        <IconButton>\n          <MenuIcon />\n        </IconButton>\n        <img\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzRceIIBz4GgeNszaN5SupI6p1SJE_Bzgk3Q&usqp=CAU\"\n          alt=\"gmail logo\"\n        />\n      </div>\n      <div className=\"header-middle\">\n        <SearchIcon />\n        <input type=\"text\" placeholder=\"Search mail\" />\n        <ArrowDropDownIcon className=\"header-inputCaret\" />\n      </div>\n      <div className=\"header-right\">\n        <IconButton>\n          <HelpOutlineIcon />\n        </IconButton>\n        <IconButton>\n          <NotificationsIcon />\n        </IconButton>\n        <IconButton>\n          <AppsIcon />\n        </IconButton>\n        <Avatar src={user?.photoUrl}></Avatar>\n        <a\n          href=\"#\"\n          onClick={signOut}\n          style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n        >\n          <h4>Sign Out</h4>\n        </a>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/Sidebar.js",["207"],"import { Button, IconButton } from \"@material-ui/core\";\nimport \"./Sidebar.css\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport DuoIcon from \"@material-ui/icons/Duo\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\nimport SidebarOption from \"./SidebarOption\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { openSendMessage } from \"../../features/mailSlice\";\nimport {\n  profileData,\n  profileSentMessages,\n  profiletotalMessages,\n  APIUserData,\n  profiletotalInboxMessages,\n  sentEmailFetchedDisplay,\n  displayList,\n} from \"../../features/dataSlice\";\nimport { useEffect } from \"react\";\nimport InboxIDs from \"../api/InboxList\";\n\nfunction Sidebar() {\n  const dispatch = useDispatch();\n  const profileDataUpdate = useSelector(APIUserData);\n\n  const user = useSelector(selectUser);\n  const profileDataTotalUnreadMessages = profileDataUpdate.profileData;\n  const TotalSentMessages = profileDataUpdate.profileSentMessages;\n  const totalMessages = profileDataUpdate.profiletotalMessages;\n\n  useEffect(() => {\n    //for getting total Messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/profile`)\n      .then((res) => {\n        dispatch(profiletotalMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // for getting the unread messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/INBOX`)\n      .then((res) => {\n        dispatch(profiletotalInboxMessages(res.data.messagesTotal));\n        dispatch(profileData(res.data.messagesUnread));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n\n    //for getting sent messages\n    InboxIDs(user)\n      .get(`/${user.user_id}/labels/SENT`)\n      .then((res) => {\n        dispatch(profileSentMessages(res.data.messagesTotal));\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [user]);\n\n  return (\n    <div className=\"sidebar\">\n      <Button\n        className=\"sidebar-compose\"\n        onClick={() => dispatch(openSendMessage())}\n        startIcon={<AddIcon fontSize=\"large\" />}\n      >\n        Compose\n      </Button>\n      <p>Total Messages: {totalMessages} </p>\n      <Link to=\"/\" className=\"sidebar-link\">\n        <SidebarOption\n          Icon={InboxIcon}\n          title=\"Inbox\"\n          number={profileDataTotalUnreadMessages}\n          onClick={() => {\n            dispatch(displayList(true));\n            dispatch(sentEmailFetchedDisplay(false));\n          }}\n          selected={profileDataUpdate?.displayList}\n        />\n      </Link>\n      <SidebarOption Icon={StarIcon} title=\"Starred\" />\n      <SidebarOption Icon={AccessTimeIcon} title=\"Snoozed\" />\n      <SidebarOption Icon={LabelImportantIcon} title=\"Important\" />\n      <SidebarOption\n        Icon={NearMeIcon}\n        title=\"Sent\"\n        onClick={() => {\n          dispatch(displayList(false));\n          dispatch(sentEmailFetchedDisplay(true));\n        }}\n        number={TotalSentMessages}\n        selected={profileDataUpdate.sentEmailFetchedDisplay}\n      />\n\n      <SidebarOption Icon={NoteIcon} title=\"Drafts\" number={5} />\n      <SidebarOption Icon={ExpandMoreIcon} title=\"More\" />\n      <div className=\"sidebar-footer\">\n        <div className=\"sidebar-footerIcons\">\n          <IconButton>\n            <PersonIcon />\n          </IconButton>\n          <IconButton>\n            <DuoIcon />\n          </IconButton>\n          <IconButton>\n            <PhoneIcon />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Mail/Mail.js",["208","209"],"import React, { useEffect } from \"react\";\nimport \"./Mail.css\";\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\nimport MoveToInboxIcon from \"@material-ui/icons/MoveToInbox\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EmailIcon from \"@material-ui/icons/Email\";\nimport WatchLaterIcon from \"@material-ui/icons/WatchLater\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport UnfoldMoreIcon from \"@material-ui/icons/UnfoldMore\";\nimport PrintIcon from \"@material-ui/icons/Print\";\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\nimport { IconButton } from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport { selectOpenMail } from \"../../features/mailSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ForwardMessage from \"../ForwardMessage/ForwardsMessage\";\nimport {\n  clickRecord,\n  replyButtonClicked,\n  forwardButtonClicked,\n  APIUserData,\n  displayList,\n  displaySingleMessage,\n} from \"../../features/dataSlice\";\n\nimport SendReply from \"../SendReply/SendReply\";\nimport { Button } from \"@material-ui/core\";\n\nimport SendIcon from \"@material-ui/icons/Send\";\n\nfunction Mail() {\n  const history = useHistory();\n  const selectedMail = useSelector(selectOpenMail);\n\n  const dispatch = useDispatch();\n  const messageActionUpdate = useSelector(replyButtonClicked);\n  const replyMessageOpen = messageActionUpdate.payload.data.replyButtonClicked;\n  const forwardButtonClickedRecord = useSelector(forwardButtonClicked);\n  const forwardMessageOpen =\n    forwardButtonClickedRecord.payload.data.forwardButtonClicked;\n  useEffect(() => {\n    document.getElementById(\"textHTML\").innerHTML = selectedMail?.textHTML;\n  }, [selectedMail]);\n  const ListRecord = useSelector(APIUserData);\n\n  return (\n    <>\n      <div className=\"mail\">\n        <div className=\"mail-tools\">\n          <div className=\"mail-toolsLeft\">\n            <IconButton\n              onClick={() => {\n                //history.push(\"/\");\n                dispatch(displayList(true));\n                dispatch(displaySingleMessage(false));\n                dispatch(clickRecord(false));\n              }}\n            >\n              <ArrowBackIcon />\n            </IconButton>\n\n            <IconButton>\n              <MoveToInboxIcon />\n            </IconButton>\n\n            <IconButton>\n              <ErrorIcon />\n            </IconButton>\n\n            <IconButton>\n              <DeleteIcon />\n            </IconButton>\n\n            <IconButton>\n              <EmailIcon />\n            </IconButton>\n\n            <IconButton>\n              <WatchLaterIcon />\n            </IconButton>\n\n            <IconButton>\n              <CheckCircleIcon />\n            </IconButton>\n\n            <IconButton>\n              <LabelImportantIcon />\n            </IconButton>\n\n            <IconButton>\n              <MoreVertIcon />\n            </IconButton>\n          </div>\n          <div className=\"mail-toolsRight\">\n            <IconButton>\n              <UnfoldMoreIcon />\n            </IconButton>\n\n            <IconButton>\n              <PrintIcon />\n            </IconButton>\n\n            <IconButton>\n              <ExitToAppIcon />\n            </IconButton>\n          </div>\n        </div>\n        <div className=\"mail-body\">\n          <div className=\"mail-bodyHeader\">\n            <div className=\"mail-subject\">\n              <h2>{selectedMail?.subject}</h2>\n              <LabelImportantIcon className=\"mail-important\" />\n            </div>\n            <p>{selectedMail?.title}</p>\n            <p className=\"mail-time\">{selectedMail?.time}</p>\n          </div>\n          <div className=\"mail-message-button\">\n            {\" \"}\n            <Button\n              variant=\"contained\"\n              endIcon={<SendIcon />}\n              onClick={() => {\n                dispatch(replyButtonClicked(true));\n              }}\n            >\n              Reply\n            </Button>\n            <Button\n              variant=\"contained\"\n              endIcon={<SendIcon />}\n              onClick={() => {\n                dispatch(forwardButtonClicked(true));\n              }}\n            >\n              Forward\n            </Button>\n          </div>\n          <div className=\"mail-message\" id=\"textHTML\">\n            <p>Loading...</p>\n          </div>\n\n          {selectedMail?.attachmentId?.length > 1 && (\n            <>\n              <h4>This mail has attachment attached with attachment ID:</h4>\n              <p>{selectedMail?.attachmentId}</p>\n            </>\n          )}\n        </div>\n      </div>\n      {replyMessageOpen && <SendReply props={selectedMail} />}\n      {forwardMessageOpen && <ForwardMessage props={selectedMail} />}\n    </>\n  );\n}\n\nexport default Mail;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendMail/SendMail.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js",["210","211","212","213","214","215","216","217","218","219","220","221","222"],"import { Checkbox, IconButton } from \"@material-ui/core\";\nimport React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\nimport { selectUser } from \"../../features/userSlice\";\nimport parseMessage from \"gmail-api-parse-message\";\n\nimport { APIUserData, userData, displayEmails } from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport InboxIDs from \"../../components/api/InboxList\";\n\nfunction EmailList() {\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] =\n    useState([]);\n\n  const user = useSelector(selectUser);\n  const data = useSelector(APIUserData);\n\n  const emailGathered = data.emailData.emailGathered;\n  const dispatch = useDispatch();\n\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n  const [resultLoaded, setResultLoaded] = useState(2);\n\n  const totalMessagesOfInbox = data.profiletotalInboxMessages;\n  var nextPageToken = data.data?.nextPageToken;\n\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map((item) => {\n          var parsedMessage = parseMessage(item); //To get the attachments, HTML and Plain TExt of the body\n\n          if (parsedMessage.attachments) {\n            const attachments = parsedMessage.attachments;\n            var attachmentId;\n            if (attachments.length > 1) {\n              let array = [];\n              const gathered = attachments.map((x) => {\n                array = [...array, x.attachmentId];\n                return array;\n              });\n              attachmentId = gathered;\n            } else attachmentId = parsedMessage.attachments[0].attachmentId;\n          } else {\n            var attachmentId = \"\";\n          }\n\n          const textHTML = parsedMessage.textHtml;\n\n          const id = item.id;\n          const message = item.snippet;\n\n          const to2 = item.payload.headers.find((header) => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find((header) => {\n            if (header.name === \"Subject\") {\n              if (header.value.length > 0) return header.value;\n              else return \"Subject is not defined\";\n            }\n          });\n\n          const date2 = item.payload.headers.find((header) => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value,\n            },\n            label,\n            attachmentId,\n            textHTML,\n          };\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying((pre) => [...pre, arr]);\n          }\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(\n              (x) => x.id === arr.id\n            );\n            if (condition) {\n              setEmailGatheredDestructurying((pre) => [...pre]);\n            } else {\n              setEmailGatheredDestructurying((pre) => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    const difference = totalMessagesOfInbox - 2 - resultLoaded;\n\n    if (difference < 1) {\n      setNextPageIcon(true);\n    } else {\n      setNextPageIcon(false);\n      setPrevPageIcon(false);\n    }\n    if (resultLoaded <= totalMessagesOfInbox) {\n      if (totalMessagesOfInbox - resultLoaded - 2 > 0) {\n        setPreArray((pre) => [...pre, nextPageToken]);\n      }\n      setResultLoaded((x) => x + 2);\n\n      InboxIDs(user)\n        .get(\n          `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}&q=category%3Aprimary`\n        )\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const prevPage = () => {\n    setNextPageIcon(false);\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const prevPageToken = preArray.pop(); //Just for next use\n      setResultLoaded((x) => x - 2);\n\n      prePageApIData(prevPageToken);\n    } else {\n      setPrevPageIcon(true);\n      preArray.pop();\n      setResultLoaded((x) => x - 2);\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`)\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n  const prePageApIData = (token) => {\n    InboxIDs(user)\n      .get(\n        `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}&q=category%3Aprimary`\n      )\n      .then((res) => {\n        {\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    setNewEmailGathered([]);\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n\n            setNewEmailGathered((newEmailGathered) => [\n              ...newEmailGathered,\n              setting,\n            ]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({ emailGathered }));\n    }\n  }, [newEmailGathered]);\n\n  return (\n    <div className=\"emailList\">\n      <div className=\"emailList-settings\">\n        <div className=\"emailList-settingsLeft\">\n          <Checkbox />\n          <IconButton>\n            <ArrowDropDownIcon />\n          </IconButton>\n          <IconButton>\n            <RedoIcon />\n          </IconButton>\n          <IconButton>\n            <MoreVertIcon />\n          </IconButton>\n        </div>\n        <div className=\"emailList-settingsRight\">\n          <IconButton\n            onClick={() => {\n              prevPage();\n            }}\n            disabled={prevPageIcon}\n          >\n            <ChevronLeftIcon />\n          </IconButton>\n          <IconButton\n            onClick={() => {\n              nextPage();\n            }}\n            disabled={nextPageIcon}\n          >\n            <ChevronRightIcon />\n          </IconButton>\n          <IconButton>\n            <KeyboardHideIcon />\n          </IconButton>\n          <IconButton>\n            <SettingsIcon />\n          </IconButton>\n        </div>\n      </div>\n\n      {data.displayList && (\n        <div className=\"emailList-sections\">\n          <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n          <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n          <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n        </div>\n      )}\n\n      <div className=\"emailList-list\">\n        {emailGatheredDestructurying.map(\n          ({\n            id,\n            data: { to, subject, description, timestamp },\n            label,\n            attachmentId,\n            textHTML,\n          }) => (\n            <EmailRow\n              id={id}\n              key={id}\n              title={to}\n              subject={subject}\n              description={description}\n              time={timestamp}\n              label={label}\n              attachmentId={attachmentId}\n              textHTML={textHTML}\n            />\n          )\n        )}\n\n        {/* {emails.map(({ id, data: { to, subject, message, timestamp } }) => (\n          <EmailRow\n            id={id}\n            key={id}\n            title={to}\n            subject={subject}\n            description={message}\n            time={new Date(timestamp?.seconds * 1000).toUTCString()}\n          />\n        ))} */}\n        {/* <EmailRow\n          title=\"Twitch\"\n          subject=\"Hey fellow streamer!!\"\n          description=\"This is a DOPE\"\n          time=\"10pm\"\n        /> */}\n      </div>\n    </div>\n  );\n}\n\nexport default EmailList;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/api/InboxList.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Login/Login.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/SidebarOption.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/ForwardMessage/ForwardsMessage.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendReply/SendReply.js",["223"],"import React, { useState } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { replyButtonClicked } from \"../../features/dataSlice\";\n\nfunction SendReply(props) {\n  const [forwardSubject, setForwardEmailSubject] = useState(\n    props.props.subject\n  );\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  const [imageEncode, setImageEncoded] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  function sendMessage(headers_obj, message) {\n    const path = \"upload/gmail/v1/users/me/messages/send\";\n    var pngData = imageEncode;\n    var mail = [\n      'Content-Type: multipart/mixed; boundary=\"foo_bar_baz\"\\r\\n',\n      \"MIME-Version: 1.0\\r\\n\",\n      `To:${headers_obj.To}\\r\\n`,\n      `Subject: ${headers_obj.Subject}\\r\\n\\r\\n`,\n\n      \"--foo_bar_baz\\r\\n\",\n      'Content-Type: text/plain; charset=\"UTF-8\"\\r\\n',\n      \"MIME-Version: 1.0\\r\\n\",\n      \"Content-Transfer-Encoding: 7bit\\r\\n\\r\\n\",\n\n      `${message}\\r\\n\\r\\n`,\n\n      \"--foo_bar_baz\\r\\n\",\n      \"Content-Type: image/png\\r\\n\",\n      \"MIME-Version: 1.0\\r\\n\",\n      \"Content-Transfer-Encoding: base64\\r\\n\",\n      `Content-Disposition: attachment; filename=\"${fileName}\" \\r\\n\\r\\n`,\n\n      pngData,\n      \"\\r\\n\\r\\n\",\n\n      \"--foo_bar_baz--\",\n    ].join(\"\");\n\n    window.gapi.client\n      .request({\n        path: path,\n        headers: { \"Content-Type\": \"message/rfc822\" },\n        method: \"POST\",\n        body: mail,\n      })\n      .then(() => {\n        alert(\"Reply has been sent.\");\n      })\n      .catch((err) => {\n        console.log(\"Error:\", err);\n      });\n  }\n\n  var reply_to = props?.props.title?.replace(/\\\"<>/g, '\"');\n  var reply_to_splitted = reply_to.split(\" \");\n\n  var email_fetched = reply_to_splitted[reply_to_splitted.length - 1].slice(\n    1,\n    -1\n  );\n  const [emailForReply, setEmailForReply] = useState(email_fetched);\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: emailForReply,\n      Subject: forwardSubject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n    dispatch(replyButtonClicked(false));\n  };\n\n  //for attachment\n  const convertBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n\n  const uploadImage = async (event) => {\n    if (event.target.files.length > 0) {\n      setFileName(event.target.files[0].name);\n      const file = event.target.files[0];\n\n      const base64 = await convertBase64(file);\n\n      setImageEncoded(base64.split(\",\")[1]);\n    }\n  };\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>Reply Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(replyButtonClicked(false))}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          contentEditable={true}\n          value={emailForReply}\n          onChange={(e) => setEmailForReply(e.target.value)}\n          required\n        />\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          contentEditable={true}\n          value={forwardSubject}\n          onChange={(e) => setForwardEmailSubject(e.target.value)}\n          required\n        />\n\n        <input\n          name=\"message\"\n          placeholder=\"Write the Reply Message Here!\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        {/* For Uploading documents */}\n        <input\n          id=\"selectImage\"\n          type=\"file\"\n          onChange={(e) => {\n            uploadImage(e);\n          }}\n        />\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendReply;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Section/Section.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailRow/EmailRow.js",["224"],"import { Checkbox, IconButton } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./EmailRow.css\";\nimport StarBorderOutlinedIcon from \"@material-ui/icons/StarBorderOutlined\";\nimport LabelImportantOutlinedIcon from \"@material-ui/icons/LabelImportantOutlined\";\nimport { useHistory } from \"react-router-dom\";\nimport { selectMail } from \"../../features/mailSlice\";\nimport {\n  APIUserData,\n  displayList,\n  displaySingleMessage,\n} from \"../../features/dataSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Mail from \"../Mail/Mail\";\nimport SentEmails from \"../SentEmails/SentEmails\";\nfunction EmailRow({\n  id,\n  title,\n  subject,\n  description,\n  time,\n  label,\n  attachmentId,\n  textHTML,\n}) {\n  const history = useHistory();\n  const dispatch = useDispatch();\n\n  const openMail = () => {\n    dispatch(\n      selectMail({\n        id,\n        title,\n        subject,\n        description,\n        time,\n        attachmentId,\n        textHTML,\n      })\n    );\n    dispatch(displayList(false));\n    dispatch(displaySingleMessage(true));\n    // history.push(\"/mail\");\n  };\n  const ListRecord = useSelector(APIUserData);\n\n  const listDisplay = ListRecord.displayList;\n  const singleDisplay = ListRecord.displaySingleMessage;\n  return (\n    <>\n      {listDisplay && (\n        <div onClick={openMail} className=\"emailRow\">\n          <div className=\"emailRow-options\">\n            <Checkbox />\n            <IconButton>\n              <StarBorderOutlinedIcon />\n            </IconButton>\n            <IconButton>\n              <LabelImportantOutlinedIcon />\n            </IconButton>\n          </div>\n          <h3 className={label ? \" emailRow-title unread\" : \"emailRow-title\"}>\n            {title}\n          </h3>\n          <div\n            className={label ? \" emailRow-message unread\" : \"emailRow-message\"}\n          >\n            <h4>\n              {subject}{\" \"}\n              <span className=\"emailRow-description\"> - {description}</span>\n            </h4>\n          </div>\n          <p className=\"emailRow-time\">{time}</p>\n        </div>\n      )}\n      {singleDisplay && <Mail />}\n      {ListRecord.sentEmailFetchedDisplay && <SentEmails />}\n    </>\n  );\n}\n\nexport default EmailRow;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SentEmails.js",["225","226","227","228"],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SingleEmailDisplaySent.js",[],{"ruleId":"229","replacedBy":"230"},{"ruleId":"231","replacedBy":"232"},{"ruleId":"233","severity":1,"message":"234","line":14,"column":35,"nodeType":"235","messageId":"236","endLine":14,"endColumn":46},{"ruleId":"237","severity":1,"message":"238","line":41,"column":6,"nodeType":"239","endLine":41,"endColumn":12,"suggestions":"240"},{"ruleId":"237","severity":1,"message":"241","line":59,"column":6,"nodeType":"239","endLine":59,"endColumn":20,"suggestions":"242"},{"ruleId":"237","severity":1,"message":"238","line":62,"column":6,"nodeType":"239","endLine":62,"endColumn":21,"suggestions":"243"},{"ruleId":"237","severity":1,"message":"238","line":68,"column":6,"nodeType":"239","endLine":68,"endColumn":12,"suggestions":"244"},{"ruleId":"233","severity":1,"message":"245","line":30,"column":9,"nodeType":"235","messageId":"236","endLine":30,"endColumn":26},{"ruleId":"246","severity":1,"message":"247","line":53,"column":5,"nodeType":"248","messageId":"249","endLine":104,"endColumn":6},{"ruleId":"250","severity":1,"message":"251","line":55,"column":34,"nodeType":"252","messageId":"253","endLine":55,"endColumn":36},{"ruleId":"250","severity":1,"message":"254","line":59,"column":58,"nodeType":"252","messageId":"255","endLine":59,"endColumn":60},{"ruleId":"250","severity":1,"message":"254","line":64,"column":63,"nodeType":"252","messageId":"255","endLine":64,"endColumn":65},{"ruleId":"250","severity":1,"message":"254","line":69,"column":60,"nodeType":"252","messageId":"255","endLine":69,"endColumn":62},{"ruleId":"237","severity":1,"message":"256","line":105,"column":6,"nodeType":"239","endLine":105,"endColumn":21,"suggestions":"257"},{"ruleId":"233","severity":1,"message":"258","line":136,"column":13,"nodeType":"235","messageId":"236","endLine":136,"endColumn":26},{"ruleId":"237","severity":1,"message":"241","line":202,"column":6,"nodeType":"239","endLine":202,"endColumn":23,"suggestions":"259"},{"ruleId":"237","severity":1,"message":"260","line":208,"column":6,"nodeType":"239","endLine":208,"endColumn":24,"suggestions":"261"},{"ruleId":"233","severity":1,"message":"262","line":9,"column":8,"nodeType":"235","messageId":"236","endLine":9,"endColumn":16},{"ruleId":"233","severity":1,"message":"263","line":19,"column":9,"nodeType":"235","messageId":"236","endLine":19,"endColumn":13},{"ruleId":"264","severity":1,"message":"265","line":50,"column":9,"nodeType":"266","endLine":53,"endColumn":10},{"ruleId":"233","severity":1,"message":"267","line":1,"column":17,"nodeType":"235","messageId":"236","endLine":1,"endColumn":26},{"ruleId":"233","severity":1,"message":"268","line":8,"column":10,"nodeType":"235","messageId":"236","endLine":8,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":47,"column":47,"nodeType":"271","messageId":"272","endLine":47,"endColumn":48,"suggestions":"273"},{"ruleId":"269","severity":1,"message":"270","line":50,"column":47,"nodeType":"271","messageId":"272","endLine":50,"endColumn":48,"suggestions":"274"},{"ruleId":"233","severity":1,"message":"275","line":53,"column":7,"nodeType":"235","messageId":"236","endLine":53,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":43,"column":6,"nodeType":"239","endLine":43,"endColumn":12,"suggestions":"276"},{"ruleId":"237","severity":1,"message":"241","line":61,"column":6,"nodeType":"239","endLine":61,"endColumn":20,"suggestions":"277"},{"ruleId":"237","severity":1,"message":"238","line":64,"column":6,"nodeType":"239","endLine":64,"endColumn":21,"suggestions":"278"},{"ruleId":"229","replacedBy":"279"},{"ruleId":"231","replacedBy":"280"},{"ruleId":"264","severity":1,"message":"281","line":48,"column":9,"nodeType":"266","endLine":52,"endColumn":10},{"ruleId":"237","severity":1,"message":"238","line":70,"column":6,"nodeType":"239","endLine":70,"endColumn":12,"suggestions":"282"},{"ruleId":"233","severity":1,"message":"283","line":35,"column":9,"nodeType":"235","messageId":"236","endLine":35,"endColumn":16},{"ruleId":"233","severity":1,"message":"284","line":47,"column":9,"nodeType":"235","messageId":"236","endLine":47,"endColumn":19},{"ruleId":"246","severity":1,"message":"247","line":46,"column":5,"nodeType":"248","messageId":"249","endLine":120,"endColumn":6},{"ruleId":"250","severity":1,"message":"251","line":48,"column":34,"nodeType":"252","messageId":"253","endLine":48,"endColumn":36},{"ruleId":"285","severity":1,"message":"286","line":63,"column":17,"nodeType":"235","messageId":"287","endLine":63,"endColumn":29},{"ruleId":"250","severity":1,"message":"254","line":71,"column":58,"nodeType":"252","messageId":"255","endLine":71,"endColumn":60},{"ruleId":"250","severity":1,"message":"254","line":76,"column":63,"nodeType":"252","messageId":"255","endLine":76,"endColumn":65},{"ruleId":"250","severity":1,"message":"254","line":83,"column":60,"nodeType":"252","messageId":"255","endLine":83,"endColumn":62},{"ruleId":"237","severity":1,"message":"256","line":121,"column":6,"nodeType":"239","endLine":121,"endColumn":21,"suggestions":"288"},{"ruleId":"246","severity":1,"message":"247","line":143,"column":11,"nodeType":"248","messageId":"249","endLine":147,"endColumn":12},{"ruleId":"246","severity":1,"message":"247","line":171,"column":11,"nodeType":"248","messageId":"249","endLine":175,"endColumn":12},{"ruleId":"246","severity":1,"message":"247","line":188,"column":9,"nodeType":"248","messageId":"249","endLine":192,"endColumn":10},{"ruleId":"237","severity":1,"message":"241","line":219,"column":6,"nodeType":"239","endLine":219,"endColumn":23,"suggestions":"289"},{"ruleId":"246","severity":1,"message":"247","line":221,"column":5,"nodeType":"248","messageId":"249","endLine":224,"endColumn":6},{"ruleId":"237","severity":1,"message":"238","line":225,"column":6,"nodeType":"239","endLine":225,"endColumn":24,"suggestions":"290"},{"ruleId":"269","severity":1,"message":"270","line":65,"column":47,"nodeType":"271","messageId":"272","endLine":65,"endColumn":48,"suggestions":"291"},{"ruleId":"233","severity":1,"message":"283","line":26,"column":9,"nodeType":"235","messageId":"236","endLine":26,"endColumn":16},{"ruleId":"233","severity":1,"message":"292","line":1,"column":28,"nodeType":"235","messageId":"236","endLine":1,"endColumn":35},{"ruleId":"237","severity":1,"message":"238","line":19,"column":6,"nodeType":"239","endLine":19,"endColumn":17,"suggestions":"293"},{"ruleId":"250","severity":1,"message":"251","line":40,"column":11,"nodeType":"294","messageId":"295","endLine":40,"endColumn":18},{"ruleId":"237","severity":1,"message":"296","line":44,"column":6,"nodeType":"239","endLine":44,"endColumn":24,"suggestions":"297"},"no-native-reassign",["298"],"no-negated-in-lhs",["299"],"no-unused-vars","'clickRecord' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["300"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["301"],["302"],["303"],"'clickRecordOfMail' is assigned a value but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useMemo has a missing dependency: 'emailGatheredDestructurying'. Either include it or remove the dependency array.",["304"],"'thisPageToken' is assigned a value but never used.",["305"],"React Hook useEffect has missing dependencies: 'dispatch' and 'load'. Either include them or remove the dependency array.",["306"],"'InboxIDs' is defined but never used.","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useEffect' is defined but never used.","'useSelector' is defined but never used.","no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["307","308"],["309","310"],"'email_fetched' is assigned a value but never used.",["311"],["312"],["313"],["298"],["299"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["314"],"'history' is assigned a value but never used.","'ListRecord' is assigned a value but never used.","no-redeclare","'attachmentId' is already defined.","redeclared",["315"],["316"],["317"],["318","319"],"'useMemo' is defined but never used.",["320"],"ReturnStatement","expectedReturnValue","React Hook useEffect has a missing dependency: 'sentEmail'. Either include it or remove the dependency array.",["321"],"no-global-assign","no-unsafe-negation",{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"322","fix":"328"},{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"messageId":"335","fix":"336","desc":"337"},{"messageId":"338","fix":"339","desc":"340"},{"messageId":"335","fix":"341","desc":"337"},{"messageId":"338","fix":"342","desc":"340"},{"desc":"322","fix":"343"},{"desc":"324","fix":"344"},{"desc":"326","fix":"345"},{"desc":"322","fix":"346"},{"desc":"329","fix":"347"},{"desc":"331","fix":"348"},{"desc":"349","fix":"350"},{"messageId":"335","fix":"351","desc":"337"},{"messageId":"338","fix":"352","desc":"340"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},"Update the dependencies array to be: [dispatch, user]",{"range":"357","text":"358"},"Update the dependencies array to be: [emailListIDs, user]",{"range":"359","text":"360"},"Update the dependencies array to be: [dispatch, emailGathered]",{"range":"361","text":"362"},{"range":"363","text":"358"},"Update the dependencies array to be: [emailGathered, emailGatheredDestructurying]",{"range":"364","text":"365"},"Update the dependencies array to be: [newEmailListIDs, user]",{"range":"366","text":"367"},"Update the dependencies array to be: [dispatch, load, newEmailGathered]",{"range":"368","text":"369"},"removeEscape",{"range":"370","text":"371"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"372","text":"373"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"374","text":"371"},{"range":"375","text":"373"},{"range":"376","text":"358"},{"range":"377","text":"360"},{"range":"378","text":"362"},{"range":"379","text":"358"},{"range":"380","text":"365"},{"range":"381","text":"367"},"Update the dependencies array to be: [dispatch, newEmailGathered]",{"range":"382","text":"383"},{"range":"384","text":"371"},{"range":"385","text":"373"},"Update the dependencies array to be: [dispatch, sentEmail]",{"range":"386","text":"387"},"Update the dependencies array to be: [sentEmail, sentEmailFetched]",{"range":"388","text":"389"},[1475,1481],"[dispatch, user]",[1976,1990],"[emailListIDs, user]",[2066,2081],"[dispatch, emailGathered]",[2446,2452],[3602,3617],"[emailGathered, emailGatheredDestructurying]",[6443,6460],"[newEmailListIDs, user]",[6606,6624],"[dispatch, load, newEmailGathered]",[1384,1385],"",[1384,1384],"\\",[1435,1436],[1435,1435],[1503,1509],[2004,2018],[2094,2109],[2399,2405],[4333,4348],[7002,7019],[7155,7173],"[dispatch, newEmailGathered]",[1866,1867],[1866,1866],[752,763],"[dispatch, sentEmail]",[1434,1452],"[sentEmail, sentEmailFetched]"]