[{"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/index.js":"1","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/App.js":"2","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/serviceWorker.js":"3","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/app/store.js":"4","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/mailSlice.js":"5","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/userSlice.js":"6","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/dataSlice.js":"7","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Header/Header.js":"8","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/Sidebar.js":"9","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Mail/Mail.js":"10","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendMail/SendMail.js":"11","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js":"12","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/api/InboxList.js":"13","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Login/Login.js":"14","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/SidebarOption.js":"15","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/ForwardMessage/ForwardsMessage.js":"16","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendReply/SendReply.js":"17","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Section/Section.js":"18","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailRow/EmailRow.js":"19","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SentEmails.js":"20","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SingleEmailDisplaySent.js":"21"},{"size":627,"mtime":1658933875726,"results":"22","hashOfConfig":"23"},{"size":3791,"mtime":1659415917683,"results":"24","hashOfConfig":"23"},{"size":5014,"mtime":1658324289674,"results":"25","hashOfConfig":"23"},{"size":328,"mtime":1658572575218,"results":"26","hashOfConfig":"23"},{"size":720,"mtime":1658324289674,"results":"27","hashOfConfig":"23"},{"size":508,"mtime":1659330667987,"results":"28","hashOfConfig":"23"},{"size":2279,"mtime":1659247743074,"results":"29","hashOfConfig":"23"},{"size":2012,"mtime":1659343451453,"results":"30","hashOfConfig":"23"},{"size":4621,"mtime":1659342499472,"results":"31","hashOfConfig":"23"},{"size":4717,"mtime":1659352041002,"results":"32","hashOfConfig":"23"},{"size":4139,"mtime":1658910179224,"results":"33","hashOfConfig":"23"},{"size":9740,"mtime":1659351345961,"results":"34","hashOfConfig":"23"},{"size":279,"mtime":1658382941125,"results":"35","hashOfConfig":"23"},{"size":2781,"mtime":1659422111771,"results":"36","hashOfConfig":"23"},{"size":359,"mtime":1658848233279,"results":"37","hashOfConfig":"23"},{"size":4677,"mtime":1659435858817,"results":"38","hashOfConfig":"23"},{"size":4624,"mtime":1658926519251,"results":"39","hashOfConfig":"23"},{"size":382,"mtime":1658324289674,"results":"40","hashOfConfig":"23"},{"size":1901,"mtime":1659350426387,"results":"41","hashOfConfig":"23"},{"size":3527,"mtime":1659416051271,"results":"42","hashOfConfig":"23"},{"size":1008,"mtime":1658904697171,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1crkjoz",{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/index.js",[],["93","94"],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/App.js",["95","96","97","98","99"],"import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectSendMessageIsOpen } from \"./features/mailSlice\";\nimport { selectUser } from \"./features/userSlice\";\nimport {\n  userData,\n  displayEmails,\n  sentEmailFetchedDone,\n  APIUserData,\n} from \"./features/dataSlice\";\n\nimport Header from \"./components/Header/Header\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport EmailList from \"./components/EmailList/EmailList\";\nimport SendMail from \"./components/SendMail/SendMail\";\nimport Login from \"./components/Login/Login\";\nimport InboxIDs from \"./components/api/InboxList\";\nimport SentEmails from \"./components/SentEmails/SentEmails\";\nimport Mail from \"./components/Mail/Mail\";\n\nfunction App() {\n  const userDependency = useSelector(selectUser);\n\n  const [user, setUser] = useState();\n\n  const dispatch = useDispatch();\n  const sendMessageIsOpen = useSelector(selectSendMessageIsOpen);\n\n  const [emailListIDs, setEmailListIDs] = useState([]);\n  const [emailGathered, setEmailGathered] = useState([]);\n  const [sentEmailFetched, setSentEmailFetched] = useState([]);\n\n  const ListRecord = useSelector(APIUserData);\n  const singleDisplay = ListRecord.displaySingleMessage;\n\n  useEffect(() => {\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userDependency]);\n  useEffect(() => {\n    dispatch(sentEmailFetchedDone(sentEmailFetched));\n  }, [sentEmailFetched]);\n\n  useEffect(() => {\n    if (user) {\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=SENT`)\n\n        .then(\n          function (response) {\n            response.data.messages.map(async (item) => {\n              await InboxIDs(user)\n                .get(`/${user.user_id}/messages/${item.id}`)\n                .then((res) => {\n                  setSentEmailFetched((sentEmailFetched) => [\n                    ...sentEmailFetched,\n                    res.data,\n                  ]);\n                })\n                .catch((error) => {\n                  console.error(error);\n                });\n            });\n          },\n          function (err) {\n            console.error(\"Execute error\", err);\n          }\n        );\n    }\n  }, [user?.user_id]);\n\n  useEffect(() => {\n    if (user) {\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2`)\n        .then((res) => {\n          dispatch(userData(res.data));\n          setEmailListIDs(res.data.messages);\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [user?.user_id]);\n\n  useEffect(() => {\n    if (emailListIDs.length > 0) {\n      emailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n            setEmailGathered((emailGathered) => [...emailGathered, setting]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {};\n    }\n  }, [emailListIDs]);\n  useEffect(() => {\n    dispatch(displayEmails({ emailGathered }));\n  }, [emailGathered]);\n  return (\n    <Router>\n      {!user ? (\n        <Login />\n      ) : (\n        <div className=\"app\">\n          <Header />\n          <div className=\"app-body\">\n            <Sidebar />\n            <SentEmails />\n            {singleDisplay && <Mail />}\n            <Switch>\n              <Route path=\"/\" exact>\n                <EmailList />\n              </Route>\n            </Switch>\n          </div>\n\n          {sendMessageIsOpen && <SendMail />}\n        </div>\n      )}\n    </Router>\n  );\n}\n\nexport default App;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/serviceWorker.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/app/store.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/mailSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/userSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/features/dataSlice.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Header/Header.js",["100","101"],"import React, { useState, useEffect } from \"react\";\nimport \"./Header.css\";\n\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { Avatar, IconButton } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport HelpOutlineIcon from \"@material-ui/icons/HelpOutline\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser, logout } from \"../../features/userSlice\";\n\nfunction Header() {\n  const userDependency = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  // const signOut = () => {\n  //   dispatch(logout());\n  // };\n  const [user, setUser] = useState();\n  useEffect(() => {\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userDependency]);\n\n  return (\n    <div className=\"header\">\n      <div className=\"header-left\">\n        <IconButton>\n          <MenuIcon />\n        </IconButton>\n        <img\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQzRceIIBz4GgeNszaN5SupI6p1SJE_Bzgk3Q&usqp=CAU\"\n          alt=\"gmail logo\"\n        />\n      </div>\n      <div className=\"header-middle\">\n        <SearchIcon />\n        <input type=\"text\" placeholder=\"Search mail\" />\n        <ArrowDropDownIcon className=\"header-inputCaret\" />\n      </div>\n      <div className=\"header-right\">\n        <IconButton>\n          <HelpOutlineIcon />\n        </IconButton>\n        <IconButton>\n          <NotificationsIcon />\n        </IconButton>\n        <IconButton>\n          <AppsIcon />\n        </IconButton>\n        <Avatar src={user?.photoUrl}></Avatar>\n        {/* <a\n          href=\"#\"\n          onClick={signOut}\n          style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\n        >\n          <h4>Sign Out</h4>\n        </a> */}\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/Sidebar.js",["102"],"import { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Sidebar.css\";\n\nimport { Button, IconButton } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport StarIcon from \"@material-ui/icons/Star\";\nimport AccessTimeIcon from \"@material-ui/icons/AccessTime\";\nimport LabelImportantIcon from \"@material-ui/icons/LabelImportant\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NoteIcon from \"@material-ui/icons/Note\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport PersonIcon from \"@material-ui/icons/Person\";\nimport DuoIcon from \"@material-ui/icons/Duo\";\nimport PhoneIcon from \"@material-ui/icons/Phone\";\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\nimport { openSendMessage } from \"../../features/mailSlice\";\nimport {\n  profileData,\n  profileSentMessages,\n  profiletotalMessages,\n  APIUserData,\n  profiletotalInboxMessages,\n  sentEmailFetchedDisplay,\n  displayList,\n  displaySingleMessage,\n  replyButtonClicked,\n  forwardButtonClicked,\n} from \"../../features/dataSlice\";\n\nimport InboxIDs from \"../api/InboxList\";\nimport SidebarOption from \"./SidebarOption\";\n\nfunction Sidebar() {\n  const dispatch = useDispatch();\n  const profileDataUpdate = useSelector(APIUserData);\n\n  const userDependency = useSelector(selectUser);\n\n  const [user, setUser] = useState();\n\n  const profileDataTotalUnreadMessages = profileDataUpdate.profileData;\n\n  const TotalSentMessages = profileDataUpdate.profileSentMessages;\n  const totalMessages = profileDataUpdate.profiletotalMessages;\n  useEffect(() => {\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userDependency]);\n  useEffect(() => {\n    if (user) {\n      //for getting total Messages\n      InboxIDs(user)\n        .get(`/${user.user_id}/profile`)\n        .then((res) => {\n          dispatch(profiletotalMessages(res.data.messagesTotal));\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n      // for getting the unread messages\n      InboxIDs(user)\n        .get(`/${user.user_id}/labels/INBOX`)\n        .then((res) => {\n          dispatch(profiletotalInboxMessages(res.data.messagesTotal));\n          dispatch(profileData(res.data.messagesUnread));\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n\n      //for getting sent messages\n      InboxIDs(user)\n        .get(`/${user.user_id}/labels/SENT`)\n        .then((res) => {\n          dispatch(profileSentMessages(res.data.messagesTotal));\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  }, [user?.user_id]);\n\n  return (\n    <div className=\"sidebar\">\n      <Button\n        className=\"sidebar-compose\"\n        onClick={() => dispatch(openSendMessage())}\n        startIcon={<AddIcon fontSize=\"large\" />}\n      >\n        Compose\n      </Button>\n      <p>Total Messages: {totalMessages} </p>\n      <Link to=\"/\" className=\"sidebar-link\">\n        <SidebarOption\n          Icon={InboxIcon}\n          title=\"Inbox\"\n          number={profileDataTotalUnreadMessages}\n          onClick={() => {\n            dispatch(displayList(true));\n            dispatch(sentEmailFetchedDisplay(false));\n            dispatch(displaySingleMessage(false));\n            dispatch(forwardButtonClicked(false));\n            dispatch(replyButtonClicked(false));\n          }}\n          selected={profileDataUpdate?.displayList}\n        />\n      </Link>\n      <SidebarOption Icon={StarIcon} title=\"Starred\" />\n      <SidebarOption Icon={AccessTimeIcon} title=\"Snoozed\" />\n      <SidebarOption Icon={LabelImportantIcon} title=\"Important\" />\n      <SidebarOption\n        Icon={NearMeIcon}\n        title=\"Sent\"\n        onClick={() => {\n          dispatch(displayList(false));\n          dispatch(sentEmailFetchedDisplay(true));\n          dispatch(displaySingleMessage(false));\n        }}\n        number={TotalSentMessages}\n        selected={profileDataUpdate.sentEmailFetchedDisplay}\n      />\n\n      <SidebarOption Icon={NoteIcon} title=\"Drafts\" />\n      <SidebarOption Icon={ExpandMoreIcon} title=\"More\" />\n      <div className=\"sidebar-footer\">\n        <div className=\"sidebar-footerIcons\">\n          <IconButton>\n            <PersonIcon />\n          </IconButton>\n          <IconButton>\n            <DuoIcon />\n          </IconButton>\n          <IconButton>\n            <PhoneIcon />\n          </IconButton>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Sidebar;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Mail/Mail.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendMail/SendMail.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailList/EmailList.js",["103","104","105","106","107","108","109","110","111","112","113","114"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport \"./EmailList.css\";\n\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\n\nimport { APIUserData, userData, displayEmails } from \"../../features/dataSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectUser } from \"../../features/userSlice\";\n\nimport InboxIDs from \"../../components/api/InboxList\";\nimport Section from \"../Section/Section\";\nimport EmailRow from \"../EmailRow/EmailRow\";\n\nimport parseMessage from \"gmail-api-parse-message\";\n\nfunction EmailList() {\n  const userDependency = useSelector(selectUser);\n\n  const [user, setUser] = useState();\n  const data = useSelector(APIUserData);\n\n  const emailGathered = data.emailData?.emailGathered;\n  const totalMessagesOfInbox = data.profiletotalInboxMessages;\n\n  const dispatch = useDispatch();\n\n  const [nextPageIcon, setNextPageIcon] = useState(false);\n  const [prevPageIcon, setPrevPageIcon] = useState(true);\n  const [resultLoaded, setResultLoaded] = useState(2);\n\n  const [newEmailListIDs, setNewEmailListIDs] = useState([]);\n  const [newEmailGathered, setNewEmailGathered] = useState([]);\n  const [preArray, setPreArray] = useState([]);\n  const [emailGatheredDestructurying, setEmailGatheredDestructurying] =\n    useState([]);\n\n  var nextPageToken = data.data?.nextPageToken;\n\n  useEffect(() => {\n    const userData = JSON.parse(localStorage.getItem(\"user\"));\n    if (userData) {\n      setUser(userData);\n    }\n  }, [userDependency]);\n  useMemo(() => {\n    {\n      if (emailGathered) {\n        emailGathered.map((item) => {\n          var parsedMessage = parseMessage(item); //To get the attachments, HTML and Plain TExt of the body\n\n          if (parsedMessage.attachments) {\n            const attachments = parsedMessage.attachments;\n\n            var attachmentId;\n            let array = [];\n            if (attachments.length > 1) {\n              const gathered = attachments.map((x) => {\n                const gatheredArray = [...array, x.attachmentId];\n                return gatheredArray;\n              });\n              attachmentId = gathered;\n            } else attachmentId = parsedMessage.attachments[0].attachmentId;\n          } else {\n            attachmentId = \"\";\n          }\n\n          const textHTML = parsedMessage.textHtml;\n\n          const id = item.id;\n          const message = item.snippet;\n\n          const to2 = item.payload.headers.find((header) => {\n            if (header.name === \"From\") {\n              return header.value;\n            }\n          });\n          const subject2 = item.payload.headers.find((header) => {\n            if (header.name === \"Subject\") {\n              if (header.value.length > 0) return header.value;\n              else return \"Subject is not defined\";\n            }\n          });\n\n          const date2 = item.payload.headers.find((header) => {\n            if (header.name === \"Date\") {\n              return header.value;\n            }\n          });\n          const unread2 = item.labelIds.indexOf(\"UNREAD\");\n          let label;\n          if (unread2 === -1) {\n            label = false;\n          } else label = true;\n          const arr = {\n            id,\n            data: {\n              to: to2.value,\n              subject: subject2.value,\n              description: message,\n              timestamp: date2.value,\n            },\n            label,\n            attachmentId,\n            textHTML,\n          };\n          if (emailGatheredDestructurying.length === 0) {\n            setEmailGatheredDestructurying((pre) => [...pre, arr]);\n          }\n          if (emailGatheredDestructurying.length > 0) {\n            const condition = emailGatheredDestructurying.find(\n              (x) => x.id === arr.id\n            );\n            if (condition) {\n              setEmailGatheredDestructurying((pre) => [...pre]);\n            } else {\n              setEmailGatheredDestructurying((pre) => [...pre, arr]);\n            }\n          }\n        });\n      }\n    }\n  }, [emailGathered]);\n\n  const nextPage = () => {\n    const difference = totalMessagesOfInbox - 2 - resultLoaded;\n\n    if (difference < 1) {\n      setNextPageIcon(true);\n    } else {\n      setNextPageIcon(false);\n      setPrevPageIcon(false);\n    }\n    if (resultLoaded <= totalMessagesOfInbox) {\n      if (totalMessagesOfInbox - resultLoaded - 2 > 0) {\n        setPreArray((pre) => [...pre, nextPageToken]);\n      }\n      setResultLoaded((x) => x + 2);\n\n      InboxIDs(user)\n        .get(\n          `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${nextPageToken}`\n        )\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n\n  const prevPage = () => {\n    setNextPageIcon(false);\n    const preArraylength = preArray.length;\n\n    if (preArraylength > 0) {\n      const prevPageToken = preArray.pop(); //Just for next use\n      setResultLoaded((x) => x - 2);\n\n      prePageApIData(prevPageToken);\n    } else {\n      setPrevPageIcon(true);\n      preArray.pop();\n      setResultLoaded((x) => x - 2);\n      InboxIDs(user)\n        .get(`/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken`)\n        .then((res) => {\n          {\n            setEmailGatheredDestructurying([]);\n            dispatch(userData(res.data));\n            setNewEmailListIDs(res.data.messages);\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n  };\n  const prePageApIData = (token) => {\n    InboxIDs(user)\n      .get(\n        `/${user.user_id}/messages?labelIds=INBOX&maxResults=2&pageToken=${token}`\n      )\n      .then((res) => {\n        {\n          setEmailGatheredDestructurying([]);\n          dispatch(userData(res.data));\n          setNewEmailListIDs(res.data.messages);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n  useEffect(() => {\n    setNewEmailGathered([]);\n    if (newEmailListIDs.length > 0) {\n      newEmailListIDs.map((Emailid) =>\n        InboxIDs(user)\n          .get(`/${user.user_id}/messages/${Emailid.id}`)\n          .then((res) => {\n            const setting = res.data;\n\n            setNewEmailGathered((newEmailGathered) => [\n              ...newEmailGathered,\n              setting,\n            ]);\n          })\n          .catch((error) => {\n            console.error(error);\n          })\n      );\n\n      return () => {}; //console.log(\"my effect is destroying\")};\n    }\n  }, [newEmailListIDs]);\n  useEffect(() => {\n    {\n      const emailGathered = newEmailGathered;\n      dispatch(displayEmails({ emailGathered }));\n    }\n  }, [newEmailGathered]);\n\n  return (\n    <>\n      {!data.displaySingleMessage && !data.sentEmailFetchedDisplay && (\n        <div className=\"emailList\">\n          <div className=\"emailList-settings\">\n            <div className=\"emailList-settingsLeft\">\n              <Checkbox />\n              <IconButton>\n                <ArrowDropDownIcon />\n              </IconButton>\n              <IconButton>\n                <RedoIcon />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n            <div className=\"emailList-settingsRight\">\n              <IconButton\n                onClick={() => {\n                  prevPage();\n                }}\n                disabled={prevPageIcon}\n              >\n                <ChevronLeftIcon />\n              </IconButton>\n              <IconButton\n                onClick={() => {\n                  nextPage();\n                }}\n                disabled={nextPageIcon}\n              >\n                <ChevronRightIcon />\n              </IconButton>\n              <IconButton>\n                <KeyboardHideIcon />\n              </IconButton>\n              <IconButton>\n                <SettingsIcon />\n              </IconButton>\n            </div>\n          </div>\n\n          {data.displayList && (\n            <div className=\"emailList-sections\">\n              <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n              <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n              <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n            </div>\n          )}\n\n          <div className=\"emailList-list\">\n            {emailGatheredDestructurying.map(\n              ({\n                id,\n                data: { to, subject, description, timestamp },\n                label,\n                attachmentId,\n                textHTML,\n              }) => (\n                <EmailRow\n                  id={id}\n                  key={id}\n                  title={to}\n                  subject={subject}\n                  description={description}\n                  time={timestamp}\n                  label={label}\n                  attachmentId={attachmentId}\n                  textHTML={textHTML}\n                />\n              )\n            )}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n\nexport default EmailList;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/api/InboxList.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Login/Login.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Sidebar/SidebarOption.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/ForwardMessage/ForwardsMessage.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SendReply/SendReply.js",["115"],"import React, { useState } from \"react\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport { Button } from \"@material-ui/core\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\nimport { closeSendMessage } from \"../../features/mailSlice\";\nimport { replyButtonClicked } from \"../../features/dataSlice\";\n\nfunction SendReply(props) {\n  const [forwardSubject, setForwardEmailSubject] = useState(\n    props.props.subject\n  );\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm();\n\n  const dispatch = useDispatch();\n  const [imageEncode, setImageEncoded] = useState([]);\n  const [fileName, setFileName] = useState(\"\");\n  function sendMessage(headers_obj, message) {\n    const path = \"upload/gmail/v1/users/me/messages/send\";\n    var pngData = imageEncode;\n    var mail = [\n      'Content-Type: multipart/mixed; boundary=\"foo_bar_baz\"\\r\\n',\n      \"MIME-Version: 1.0\\r\\n\",\n      `To:${headers_obj.To}\\r\\n`,\n      `Subject: ${headers_obj.Subject}\\r\\n\\r\\n`,\n\n      \"--foo_bar_baz\\r\\n\",\n      'Content-Type: text/plain; charset=\"UTF-8\"\\r\\n',\n      \"MIME-Version: 1.0\\r\\n\",\n      \"Content-Transfer-Encoding: 7bit\\r\\n\\r\\n\",\n\n      `${message}\\r\\n\\r\\n`,\n\n      \"--foo_bar_baz\\r\\n\",\n      \"Content-Type: image/png\\r\\n\",\n      \"MIME-Version: 1.0\\r\\n\",\n      \"Content-Transfer-Encoding: base64\\r\\n\",\n      `Content-Disposition: attachment; filename=\"${fileName}\" \\r\\n\\r\\n`,\n\n      pngData,\n      \"\\r\\n\\r\\n\",\n\n      \"--foo_bar_baz--\",\n    ].join(\"\");\n\n    window.gapi.client\n      .request({\n        path: path,\n        headers: { \"Content-Type\": \"message/rfc822\" },\n        method: \"POST\",\n        body: mail,\n      })\n      .then(() => {\n        alert(\"Reply has been sent.\");\n      })\n      .catch((err) => {\n        console.log(\"Error:\", err);\n      });\n  }\n\n  var reply_to = props?.props.title?.replace(/\\\"<>/g, '\"');\n  var reply_to_splitted = reply_to.split(\" \");\n\n  var email_fetched = reply_to_splitted[reply_to_splitted.length - 1].slice(\n    1,\n    -1\n  );\n  const [emailForReply, setEmailForReply] = useState(email_fetched);\n  const onSubmit = (formData) => {\n    const headers_obj = {\n      To: emailForReply,\n      Subject: forwardSubject,\n    };\n    const message = formData.message;\n    sendMessage(headers_obj, message);\n\n    dispatch(closeSendMessage());\n    dispatch(replyButtonClicked(false));\n  };\n\n  //for attachment\n  const convertBase64 = (file) => {\n    return new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsDataURL(file);\n\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error);\n      };\n    });\n  };\n\n  const uploadImage = async (event) => {\n    if (event.target.files.length > 0) {\n      setFileName(event.target.files[0].name);\n      const file = event.target.files[0];\n\n      const base64 = await convertBase64(file);\n\n      setImageEncoded(base64.split(\",\")[1]);\n    }\n  };\n\n  return (\n    <div className=\"sendMail\">\n      <div className=\"sendMail-header\">\n        <h3>Reply Message</h3>\n        <CloseIcon\n          onClick={() => dispatch(replyButtonClicked(false))}\n          className=\"sendMail-close\"\n        />\n      </div>\n\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <input\n          name=\"to\"\n          placeholder=\"To\"\n          type=\"email\"\n          contentEditable={true}\n          value={emailForReply}\n          onChange={(e) => setEmailForReply(e.target.value)}\n          required\n        />\n        <input\n          name=\"subject\"\n          placeholder=\"Subject\"\n          type=\"text\"\n          contentEditable={true}\n          value={forwardSubject}\n          onChange={(e) => setForwardEmailSubject(e.target.value)}\n          required\n        />\n\n        <input\n          name=\"message\"\n          placeholder=\"Write the Reply Message Here!\"\n          type=\"text\"\n          className=\"sendMail-message\"\n          {...register(\"message\", { required: true })}\n        />\n        {errors.message && (\n          <p className=\"sendMail-error\">Message is Required!</p>\n        )}\n        {/* For Uploading documents */}\n        <input\n          id=\"selectImage\"\n          type=\"file\"\n          onChange={(e) => {\n            uploadImage(e);\n          }}\n        />\n        <div className=\"sendMail-options\">\n          <Button\n            type=\"submit\"\n            variant=\"contained\"\n            color=\"primary\"\n            className=\"sendMail-send\"\n          >\n            Send\n          </Button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SendReply;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/Section/Section.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/EmailRow/EmailRow.js",[],"/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SentEmails.js",["116"],"import React, { useMemo, useState } from \"react\";\n\nimport KeyboardHideIcon from \"@material-ui/icons/KeyboardHide\";\nimport SettingsIcon from \"@material-ui/icons/Settings\";\nimport InboxIcon from \"@material-ui/icons/Inbox\";\nimport PeopleIcon from \"@material-ui/icons/People\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport RedoIcon from \"@material-ui/icons/Redo\";\n\nimport { APIUserData } from \"../../features/dataSlice\";\nimport { useSelector } from \"react-redux\";\n\nimport Section from \"../Section/Section\";\nimport SingleEmailDisplaySent from \"./SingleEmailDisplaySent\";\n\nimport parseMessage from \"gmail-api-parse-message\";\n\nimport { Checkbox, IconButton } from \"@material-ui/core\";\nconst SentEmails = () => {\n  const [sentEmail, SetSentEmail] = useState([]);\n  const sentEmailsToDisplay = useSelector(APIUserData);\n  const sentEmailDependencyArray = sentEmailsToDisplay.sentEmailFetchedDone;\n\n  useMemo(() => {\n    if (sentEmailDependencyArray.length > 0) {\n      sentEmailDependencyArray.map((item) => {\n        var parsedMessage = parseMessage(item);\n        const condition = sentEmail.find((array) => array.id === item.id);\n        if (condition) {\n          return sentEmail;\n        } else {\n          ///Re structuring the API Fetched Data to pass to component to display it.\n          const arr = {\n            id: parsedMessage.id,\n            to: parsedMessage.headers.to,\n            subject: parsedMessage.headers.subject,\n            description: parsedMessage.snippet,\n            timestamp: parsedMessage.headers.date,\n          };\n          return SetSentEmail((sentEmail) => [...sentEmail, arr]);\n        }\n      });\n    }\n  }, [sentEmailDependencyArray]);\n\n  return (\n    <>\n      {sentEmailsToDisplay.sentEmailFetchedDisplay && (\n        <div className=\"emailList\">\n          <div className=\"emailList-settings\">\n            <div className=\"emailList-settingsLeft\">\n              <Checkbox />\n              <IconButton>\n                <ArrowDropDownIcon />\n              </IconButton>\n              <IconButton>\n                <RedoIcon />\n              </IconButton>\n              <IconButton>\n                <MoreVertIcon />\n              </IconButton>\n            </div>\n            <div className=\"emailList-settingsRight\">\n              <IconButton>\n                <KeyboardHideIcon />\n              </IconButton>\n              <IconButton>\n                <SettingsIcon />\n              </IconButton>\n            </div>\n          </div>\n\n          {sentEmailsToDisplay.sentEmailFetchedDisplay && (\n            <div className=\"emailList-sections\">\n              <Section Icon={InboxIcon} title=\"Primary\" color=\"red\" selected />\n              <Section Icon={PeopleIcon} title=\"Social\" color=\"#1A73E8\" />\n              <Section Icon={LocalOfferIcon} title=\"Promotions\" color=\"green\" />\n            </div>\n          )}\n\n          <div className=\"emailList-list\">\n            {sentEmailsToDisplay.sentEmailFetchedDisplay &&\n              sentEmail.map(({ id, to, subject, description, timestamp }) => (\n                <SingleEmailDisplaySent\n                  key={id}\n                  id={id}\n                  to={to}\n                  subject={subject}\n                  description={description}\n                  timestamp={timestamp}\n                />\n              ))}\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default SentEmails;\n","/home/sohaib/Desktop/MERN/Evaluation/GMAIL OAUTH/src/components/SentEmails/SingleEmailDisplaySent.js",[],{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","severity":1,"message":"122","line":47,"column":6,"nodeType":"123","endLine":47,"endColumn":24,"suggestions":"124"},{"ruleId":"121","severity":1,"message":"125","line":75,"column":6,"nodeType":"123","endLine":75,"endColumn":21,"suggestions":"126"},{"ruleId":"121","severity":1,"message":"127","line":89,"column":6,"nodeType":"123","endLine":89,"endColumn":21,"suggestions":"128"},{"ruleId":"121","severity":1,"message":"125","line":107,"column":6,"nodeType":"123","endLine":107,"endColumn":20,"suggestions":"129"},{"ruleId":"121","severity":1,"message":"122","line":110,"column":6,"nodeType":"123","endLine":110,"endColumn":21,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":13,"column":22,"nodeType":"133","messageId":"134","endLine":13,"endColumn":28},{"ruleId":"131","severity":1,"message":"135","line":17,"column":9,"nodeType":"133","messageId":"134","endLine":17,"endColumn":17},{"ruleId":"121","severity":1,"message":"127","line":87,"column":6,"nodeType":"123","endLine":87,"endColumn":21,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":56,"column":5,"nodeType":"139","messageId":"140","endLine":131,"endColumn":6},{"ruleId":"141","severity":1,"message":"142","line":58,"column":34,"nodeType":"143","messageId":"144","endLine":58,"endColumn":36},{"ruleId":"141","severity":1,"message":"145","line":82,"column":58,"nodeType":"143","messageId":"146","endLine":82,"endColumn":60},{"ruleId":"141","severity":1,"message":"145","line":87,"column":63,"nodeType":"143","messageId":"146","endLine":87,"endColumn":65},{"ruleId":"141","severity":1,"message":"145","line":94,"column":60,"nodeType":"143","messageId":"146","endLine":94,"endColumn":62},{"ruleId":"121","severity":1,"message":"147","line":132,"column":6,"nodeType":"123","endLine":132,"endColumn":21,"suggestions":"148"},{"ruleId":"137","severity":1,"message":"138","line":154,"column":11,"nodeType":"139","messageId":"140","endLine":158,"endColumn":12},{"ruleId":"137","severity":1,"message":"138","line":182,"column":11,"nodeType":"139","messageId":"140","endLine":186,"endColumn":12},{"ruleId":"137","severity":1,"message":"138","line":199,"column":9,"nodeType":"139","messageId":"140","endLine":203,"endColumn":10},{"ruleId":"121","severity":1,"message":"125","line":230,"column":6,"nodeType":"123","endLine":230,"endColumn":23,"suggestions":"149"},{"ruleId":"137","severity":1,"message":"138","line":232,"column":5,"nodeType":"139","messageId":"140","endLine":235,"endColumn":6},{"ruleId":"121","severity":1,"message":"122","line":236,"column":6,"nodeType":"123","endLine":236,"endColumn":24,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":65,"column":47,"nodeType":"153","messageId":"154","endLine":65,"endColumn":48,"suggestions":"155"},{"ruleId":"121","severity":1,"message":"156","line":46,"column":6,"nodeType":"123","endLine":46,"endColumn":32,"suggestions":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["160"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["161"],"React Hook useEffect has missing dependencies: 'dispatch' and 'user'. Either include them or remove the dependency array.",["162"],["163"],["164"],"no-unused-vars","'logout' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.",["165"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.find() expects a value to be returned at the end of arrow function.","expectedAtEnd","React Hook useMemo has a missing dependency: 'emailGatheredDestructurying'. Either include it or remove the dependency array.",["166"],["167"],["168"],"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["169","170"],"React Hook useMemo has a missing dependency: 'sentEmail'. Either include it or remove the dependency array.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"176","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"messageId":"189","fix":"190","desc":"191"},{"messageId":"192","fix":"193","desc":"194"},{"desc":"195","fix":"196"},"Update the dependencies array to be: [dispatch, sentEmailFetched]",{"range":"197","text":"198"},"Update the dependencies array to be: [user, user.user_id]",{"range":"199","text":"200"},"Update the dependencies array to be: [dispatch, user, user.user_id]",{"range":"201","text":"202"},"Update the dependencies array to be: [emailListIDs, user]",{"range":"203","text":"204"},"Update the dependencies array to be: [dispatch, emailGathered]",{"range":"205","text":"206"},{"range":"207","text":"202"},"Update the dependencies array to be: [emailGathered, emailGatheredDestructurying]",{"range":"208","text":"209"},"Update the dependencies array to be: [newEmailListIDs, user]",{"range":"210","text":"211"},"Update the dependencies array to be: [dispatch, newEmailGathered]",{"range":"212","text":"213"},"removeEscape",{"range":"214","text":"215"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"216","text":"217"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [sentEmail, sentEmailDependencyArray]",{"range":"218","text":"219"},[1573,1591],"[dispatch, sentEmailFetched]",[2351,2366],"[user, user.user_id]",[2702,2717],"[dispatch, user, user.user_id]",[3170,3184],"[emailListIDs, user]",[3260,3275],"[dispatch, emailGathered]",[2768,2783],[4560,4575],"[emailGathered, emailGatheredDestructurying]",[7187,7204],"[newEmailListIDs, user]",[7340,7358],"[dispatch, newEmailGathered]",[1866,1867],"",[1866,1866],"\\",[1784,1810],"[sentEmail, sentEmailDependencyArray]"]